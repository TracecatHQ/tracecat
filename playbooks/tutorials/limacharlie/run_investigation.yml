definition:
  title: Run Atomic Red Team tests on Limacharlie sensors
  description:
    Given `test_ids` and `tags` run Atomic Red Team tests on tagged sensors in the organization.
    Erases past executables on the sensors before running the tests.
    Requires secret named `limacharlie` with keys `LIMACHARLIE_API_SECRET` and `LIMACHARLIE_OID`.
  entrypoint:
    expects:
      tags: list[str]
      test_ids: list[str]
    ref: list_sensors_by_tags
  inputs:
    api_url: https://api.limacharlie.io/v1
    jwt_url: https://jwt.limacharlie.io
    token_response_key: token
    payload_dir_path: "C:\\F0"
    child_workflow_id:
    batch_size: 10

  actions:
    - action: core.http_request
      ref: list_sensors_by_tags
      args:
        url: "{{ INPUTS.api_url }}/tags/{{ SECRETS.limacharlie.LIMACHARLIE_OID }}/{ TRIGGER.tags }"
        token_response_key: ${{ INPUTS.token_response_key }}
        jwt_url: "{{ INPUTS.jwt_url }}?oid={{ SECRETS.limacharlie.LIMACHARLIE_OID }}&secret={{ SECRETS.limacharlie.LIMACHARLIE_API_SECRET }}"
        method: GET

    - action: core.transform.reshape
      ref: extract_sensor_ids
      depends_on:
        - list_sensors_by_tags
      args:
        value:
          sensor_ids: ${{ FN.to_keys(ACTIONS.list_sensors_by_tags.result) }}

    - action: core.http_request
      ref: erase_past_executables
      depends_on:
        - extract_sensor_ids
      for_each: ${{ for var.sensor_id in ACTIONS.extract_sensor_ids.result.sensor_ids }}
      args:
        url: "${{ INPUTS.api_url }}/${{ var.sensor_id }}/"
        token_response_key: ${{ INPUTS.token_response_key }}
        jwt_url: "${{ INPUTS.jwt_url }}?oid=${{ SECRETS.limacharlie.LIMACHARLIE_OID }}&secret=${{ SECRETS.limacharlie.LIMACHARLIE_API_SECRET }}"
        payload:
          tasks: ["run --shell-command 'del ${{ INPUTS.payload_dir_path }}\\*.exe'"]
        headers:
          Content-Type: application/x-www-form-urlencoded

    - action: core.workflow.execute
      ref: run_tests_on_sensor
      depends_on:
        - erase_past_executables
      for_each: ${{ for var.sensor_id in ACTIONS.extract_sensor_ids.result.sensor_ids }}
      args:
        workflow_id: ${{ INPUTS.child_workflow_id }}
        loop_strategy: parallel
        fail_strategy: isolated
        batch_size: ${{ INPUTS.batch_size }}
        trigger_inputs:
          sensor_id: ${{ var.sensor_id }}
          investigation_id: ${{ FN.uuid4() }}
          test_ids: ${{ TRIGGER.test_ids }}
          payload_dir_path: ${{ INPUTS.payload_dir_path }}
