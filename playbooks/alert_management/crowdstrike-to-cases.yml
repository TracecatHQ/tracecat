# INSTRUCTIONS:
# From the root of the repository, run the following commands to get started.
#
# (1) Create, commit, and activate the workflow (+webhook) in one step with the following command:
# >>> tracecat workflow create --commit playbooks/alert_management/crowdstrike-to-cases.yml --activate --webhook
#
# (2) List all workflows and take note of the workflow ID
# >>> tracecat workflow list
#
# (3) To run the workflow, run the following command with the workflow ID (replace with your own):
# >>> tracecat workflow run wf-XXXXXXXXXXXXXXXXXXXXXXXXXX --data '{"start_time": "2024-01-01", "end_time": "2024-01-02"}'
# To run workflow with action tests:
# >>> tracecat workflow run wf-XXXXXXXXXXXXXXXXXXXXXXXXXX --data '{"start_time": "2024-01-01", "end_time": "2024-01-02"}' --test
#
# TRIGGER DATA SHAPE:
# - start_time: ISO8601 string
# - end_time: ISO8601 string
# - update_crowdstrike_alert:
#     This would be the Webhook URL to `playbooks/alert_management/slack-to-crowdstrike-update.yml`.
# .   You can get the webhook URL by running `tracecat workflow inspect wf-id-for-send-slack-notification`.

definition:
  title: Fetch Crowdstrike alerts and open cases.
  description: Pulls Crowdstrike alerts and opens cases in Tracecat.
  config:
    # NOTE: Setting `enable_runtime_tests` to `true` here will override all other
    # runtime configuration for this flag i.e. tracecat workflow run --test flag).
    enable_runtime_tests: true
  entrypoint:
    ref: pull_crowdstrike_alerts
  triggers:
    - type: webhook
      ref: crowdstrike_alerts_webhook
      entrypoint: pull_crowdstrike_alerts

  actions:
    # Mocked
    - ref: pull_crowdstrike_alerts
      action: integrations.crowdstrike.list_crowdstrike_alerts
      args:
        start_time: ${{ TRIGGER.start_time }}
        end_time: ${{ TRIGGER.end_time }}

    - ref: reshape_alerts_into_smac
      action: core.transform.reshape
      depends_on:
        - pull_crowdstrike_alerts
      for_each: ${{ for var.alert in ACTIONS.pull_crowdstrike_alerts.result }}
      args:
        value:
          title: ${{ var.alert.name }} # Name of the detection
          description: ${{ var.alert.description }} # Description of the detected file or activity
          payload:
            rule: ${{ var.alert.id }} # Identifier associated with the alert
            severity: ${{ var.alert.severity }} # Severity level associated with the detection
          status: ${{ 'closed' if FN.is_equal(var.alert.status, 'resolved') else 'open' }} # Status of the alert
          malice: ${{ 'malicious' if FN.greater_than(var.alert.severity, 0) else 'benign' }} # Determines malice based on severity
          action: quarantine
          context:
            filepath: ${{ var.alert.filepath }}
            cid: ${{ var.alert.cid }} # CrowdStrike identifier associated with the device
            parent_user_id: ${{ var.alert.parent_details.user_id -> str }}
            parent_user_name: ${{ var.alert.parent_details.user_name -> str }}
            grandparent_user_id: ${{ var.alert.grandparent_details.user_id -> str }}
            grandparent_user_name: ${{ var.alert.grandparent_details.user_name -> str }}
            resource_type: ${{ 'device' }} # Assuming resource type is 'device'
            context_timestamp: ${{ var.alert.context_timestamp -> str }}
            updated_at: ${{ var.alert.updated_timestamp -> str }} # Timestamp indicating when the alert was last updated
            created_at: ${{ var.alert.created_timestamp -> str }} # Timestamp indicating when the alert was created
            user_name: ${{ var.alert.user_name }}

    - ref: send_slack_notification
      action: integrations.chat.slack.post_slack_message
      depends_on:
        - reshape_alerts_into_smac
      for_each: ${{ for var.smac in ACTIONS.reshape_alerts_into_smac.result }}
      args:
        channel: ${{ SECRETS.slack.SLACK_CHANNEL }}
        text: Crowdstrike alerts
        blocks:
          - type: header
            text:
              type: plain_text
              text: ${{ var.smac.title }}
              emoji: true
          - type: section
            text:
              type: mrkdwn
              text: ${{ var.smac.description }}
          - type: section
            fields:
              - type: mrkdwn
                text: "*Status:* ${{ var.smac.status }}"
              - type: mrkdwn
                text: "*Malice:* ${{ var.smac.malice }}"
              - type: mrkdwn
                text: "*Action:* ${{ var.smac.action }}"
              - type: mrkdwn
                text: "*Context:* ${{ var.smac.context }}"
          - type: section
            text:
              type: mrkdwn
              text: "Select an option to update the alert:"
            accessory:
              type: static_select
              action_id: ${{ TRIGGER.update_crowdstrike_alert }}?action_id=update_crowdstrike_alerts&alert_id=${{ var.smac.context.cid }}&old_status=${{ var.smac.status }}&username=${{ var.smac.context.user_name }}
              options:
                - text:
                    type: plain_text
                    text: Ignore
                  value: new_status=ignored
                - text:
                    type: plain_text
                    text: True Positive
                  value: new_status=true_positive
                - text:
                    type: plain_text
                    text: False Positive
                  value: new_status=false_positive

    - ref: open_cases
      action: core.open_case
      depends_on:
        - reshape_alerts_into_smac
      for_each: ${{ for var.smac in ACTIONS.reshape_alerts_into_smac.result }}
      args:
        case_title: ${{ var.smac.title }}
        status: ${{ var.smac.status }}
        malice: ${{ var.smac.malice }}
        action: ${{ var.smac.action }}
        context: ${{ var.smac.context }}
        payload: ${{ var.smac.payload }}
        priority: ${{ 'high' if FN.greater_than(var.smac.payload.severity, 50) else 'low' }}

  tests:
    - ref: pull_crowdstrike_alerts
      success:
        - https://raw.githubusercontent.com/TracecatHQ/tracecat/main/tests/data/log_samples/crowdstrike/alert.json
