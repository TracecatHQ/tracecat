definition:
  title: Send Slack notifications for GuardDuty findings
  description: |
    Pulls GuardDuty findings from AWS and sends them to Slack.
    Also sends a message if no findings available.

  entrypoint:
    ref: pull_aws_guardduty_findings
    expects:
      start_time: datetime
      end_time: datetime

  triggers:
    - type: webhook
      ref: guardduty_findings_webhook
      entrypoint: pull_aws_guardduty_findings

  actions:
    - ref: pull_aws_guardduty_findings
      action: integrations.aws.guardduty.list_guardduty_alerts
      args:
        start_time: ${{ TRIGGER.start_time }}
        end_time: ${{ TRIGGER.end_time }}
        limit: 10

    # Short circuit the workflow if no findings are found
    - ref: report_no_findings
      action: core.http_request
      depends_on:
        - pull_aws_guardduty_findings
      run_if: ${{ FN.is_empty(ACTIONS.pull_aws_guardduty_findings.result) }}
      args:
        url: ${{ SECRETS.slack.SLACK_WEBHOOK }}
        method: POST
        headers:
          Content-Type: application/json
        payload:
          text: Tracecat ran workflow for GuardDuty findings, but no findings were found

    # Transform the list of GuardDuty findings into a list of SMAC findings
    - ref: reshape_findings_into_smac
      action: core.transform.reshape
      depends_on:
        - pull_aws_guardduty_findings
      run_if: ${{ FN.not_empty(ACTIONS.pull_aws_guardduty_findings.result) }}
      for_each: ${{ for var.finding in ACTIONS.pull_aws_guardduty_findings.result }}
      args:
        value:
          title: ${{ var.finding.Title }}
          description: ${{ var.finding.Description }}
          payload:
            rule: ${{ var.finding.Type }}
            severity: ${{ var.finding.Severity }}
          status: ${{ 'closed' if var.finding.Service.Archived else 'open' }}
          malice: ${{ 'malicious' if FN.greater_than(var.finding.Severity, 0) else 'benign' }}
          action: Investigate and remediate
          context:
            account_id: ${{ var.finding.AccountId }}
            region: ${{ var.finding.Region }}
            resource_type: ${{ var.finding.Resource.ResourceType }}
            updated_at: ${{ var.finding.UpdatedAt }}
            created_at: ${{ var.finding.CreatedAt }}

    - ref: send_slack_notifications
      action: integrations.chat.slack.post_slack_message
      depends_on:
        - reshape_findings_into_smac
      # Assign each SMAC finding to a variable named `smac`
      for_each: ${{ for var.smac in ACTIONS.reshape_findings_into_smac.result }}
      args:
        channel: ${{ SECRETS.slack.SLACK_CHANNEL }}
        text: GuardDuty findings
        blocks:
          - type: header
            text:
              type: plain_text
              text: ${{ var.smac.title }}
              emoji: true
          - type: section
            text:
              type: mrkdwn
              text: ${{ var.smac.description }}
          - type: section
            fields:
              - type: mrkdwn
                text: "*Status:* ${{ var.smac.status }}"
              - type: mrkdwn
                text: "*Malice:* ${{ var.smac.malice }}"
              - type: mrkdwn
                text: "*Action:* ${{ var.smac.action }}"
              - type: mrkdwn
                text: "*Context:* ${{ var.smac.context }}"
