"""add_entity_relation_fields

Revision ID: 30bbfab2863d
Revises: fbc309cb247f
Create Date: 2025-08-07 17:06:30.486491

"""
from collections.abc import Sequence

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '30bbfab2863d'
down_revision: str | None = 'fbc309cb247f'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('entity_metadata',
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('surrogate_id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('icon', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('surrogate_id'),
    sa.UniqueConstraint('owner_id', 'name')
    )
    op.create_index(op.f('ix_entity_metadata_id'), 'entity_metadata', ['id'], unique=True)
    op.create_index(op.f('ix_entity_metadata_is_active'), 'entity_metadata', ['is_active'], unique=False)
    op.create_index(op.f('ix_entity_metadata_name'), 'entity_metadata', ['name'], unique=False)
    op.create_table('entity_data',
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('surrogate_id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('entity_metadata_id', sa.UUID(), nullable=True),
    sa.Column('field_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.ForeignKeyConstraint(['entity_metadata_id'], ['entity_metadata.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('surrogate_id')
    )
    op.create_index('idx_entity_data_gin', 'entity_data', ['field_data'], unique=False, postgresql_using='gin')
    op.create_index('idx_entity_metadata_id', 'entity_data', ['entity_metadata_id'], unique=False)
    op.create_index('idx_entity_owner_created', 'entity_data', ['entity_metadata_id', 'owner_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_entity_data_id'), 'entity_data', ['id'], unique=True)
    op.create_table('field_metadata',
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('entity_metadata_id', sa.UUID(), nullable=True),
    sa.Column('field_key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('field_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('display_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('field_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('deactivated_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('is_required', sa.Boolean(), nullable=False),
    sa.Column('is_unique', sa.Boolean(), nullable=False),
    sa.Column('relation_kind', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('relation_target_entity_id', sa.UUID(), nullable=True),
    sa.Column('relation_backref_field_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['entity_metadata_id'], ['entity_metadata.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['relation_backref_field_id'], ['field_metadata.id'], ondelete='SET NULL', initially='DEFERRED', deferrable=True),
    sa.ForeignKeyConstraint(['relation_target_entity_id'], ['entity_metadata.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('entity_metadata_id', 'field_key'),
    # CHECK constraints for relation fields
    sa.CheckConstraint(
        "(relation_kind IS NULL AND relation_target_entity_id IS NULL AND relation_backref_field_id IS NULL) OR "
        "(relation_kind IN ('belongs_to', 'has_many') AND relation_target_entity_id IS NOT NULL)",
        name='ck_field_metadata_relation_integrity'
    )
    )
    op.create_index('idx_active_fields', 'field_metadata', ['entity_metadata_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_field_metadata_field_key'), 'field_metadata', ['field_key'], unique=False)
    op.create_index(op.f('ix_field_metadata_is_active'), 'field_metadata', ['is_active'], unique=False)
    op.create_table('entity_relation_link',
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('source_entity_metadata_id', sa.UUID(), nullable=True),
    sa.Column('source_field_id', sa.UUID(), nullable=True),
    sa.Column('source_record_id', sa.UUID(), nullable=True),
    sa.Column('target_entity_metadata_id', sa.UUID(), nullable=True),
    sa.Column('target_record_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['source_entity_metadata_id'], ['entity_metadata.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_field_id'], ['field_metadata.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_record_id'], ['entity_data.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_entity_metadata_id'], ['entity_metadata.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_record_id'], ['entity_data.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('source_record_id', 'source_field_id', name='uq_entity_relation_link_source')
    )
    op.create_index('idx_relation_field_target', 'entity_relation_link', ['source_field_id', 'target_record_id'], unique=False)
    op.create_index('idx_relation_owner', 'entity_relation_link', ['owner_id'], unique=False)
    op.create_index('idx_relation_source', 'entity_relation_link', ['source_record_id', 'source_field_id'], unique=False)
    op.create_index('idx_relation_target', 'entity_relation_link', ['target_record_id'], unique=False)
    op.create_index(op.f('ix_entity_relation_link_owner_id'), 'entity_relation_link', ['owner_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_entity_relation_link_owner_id'), table_name='entity_relation_link')
    op.drop_index('idx_relation_target', table_name='entity_relation_link')
    op.drop_index('idx_relation_source', table_name='entity_relation_link')
    op.drop_index('idx_relation_owner', table_name='entity_relation_link')
    op.drop_index('idx_relation_field_target', table_name='entity_relation_link')
    op.drop_table('entity_relation_link')
    op.drop_index(op.f('ix_field_metadata_is_active'), table_name='field_metadata')
    op.drop_index(op.f('ix_field_metadata_field_key'), table_name='field_metadata')
    op.drop_index('idx_active_fields', table_name='field_metadata')
    op.drop_table('field_metadata')
    op.drop_index(op.f('ix_entity_data_id'), table_name='entity_data')
    op.drop_index('idx_entity_owner_created', table_name='entity_data')
    op.drop_index('idx_entity_metadata_id', table_name='entity_data')
    op.drop_index('idx_entity_data_gin', table_name='entity_data', postgresql_using='gin')
    op.drop_table('entity_data')
    op.drop_index(op.f('ix_entity_metadata_name'), table_name='entity_metadata')
    op.drop_index(op.f('ix_entity_metadata_is_active'), table_name='entity_metadata')
    op.drop_index(op.f('ix_entity_metadata_id'), table_name='entity_metadata')
    op.drop_table('entity_metadata')
    # ### end Alembic commands ###
