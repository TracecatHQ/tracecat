"""add_entity_tables_consolidated

Revision ID: 2055f3d2f021
Revises: fbc309cb247f
Create Date: 2025-08-14 22:49:32.975592

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "2055f3d2f021"
down_revision: str | None = "fbc309cb247f"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "entity",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("surrogate_id", sa.Integer(), nullable=False),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("display_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("icon", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("surrogate_id"),
        sa.UniqueConstraint("owner_id", "name"),
    )
    op.create_index(op.f("ix_entity_id"), "entity", ["id"], unique=True)
    op.create_index(op.f("ix_entity_is_active"), "entity", ["is_active"], unique=False)
    op.create_index(op.f("ix_entity_name"), "entity", ["name"], unique=False)
    op.create_table(
        "field_metadata",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("entity_id", sa.UUID(), nullable=True),
        sa.Column("field_key", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("field_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("display_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("deactivated_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column(
            "default_value", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("relation_kind", sa.String(length=20), nullable=True),
        sa.Column("target_entity_id", sa.UUID(), nullable=True),
        sa.Column(
            "enum_options", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.ForeignKeyConstraint(["entity_id"], ["entity.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(
            ["target_entity_id"], ["entity.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("entity_id", "field_key"),
    )
    op.create_index(
        "idx_active_fields", "field_metadata", ["entity_id", "is_active"], unique=False
    )
    op.create_index(
        op.f("ix_field_metadata_field_key"),
        "field_metadata",
        ["field_key"],
        unique=False,
    )
    op.create_index(
        op.f("ix_field_metadata_is_active"),
        "field_metadata",
        ["is_active"],
        unique=False,
    )
    op.create_table(
        "record",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("surrogate_id", sa.Integer(), nullable=False),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("entity_id", sa.UUID(), nullable=True),
        sa.Column("field_data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(["entity_id"], ["entity.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("surrogate_id"),
    )
    op.create_index("idx_record_entity_id", "record", ["entity_id"], unique=False)
    op.create_index(
        "idx_record_gin", "record", ["field_data"], unique=False, postgresql_using="gin"
    )
    op.create_index(
        "idx_record_owner_created",
        "record",
        ["entity_id", "owner_id", "created_at"],
        unique=False,
    )
    op.create_index(op.f("ix_record_id"), "record", ["id"], unique=True)
    op.create_table(
        "case_record_link",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("surrogate_id", sa.Integer(), nullable=False),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("case_id", sa.UUID(), nullable=True),
        sa.Column("entity_id", sa.UUID(), nullable=True),
        sa.Column("record_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(["case_id"], ["cases.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["entity_id"], ["entity.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["record_id"], ["record.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("surrogate_id"),
        sa.UniqueConstraint("case_id", "record_id", name="uq_case_record_link"),
    )
    op.create_index(
        "idx_case_record_case", "case_record_link", ["case_id"], unique=False
    )
    op.create_index(
        "idx_case_record_entity", "case_record_link", ["entity_id"], unique=False
    )
    op.create_index(
        op.f("ix_case_record_link_id"), "case_record_link", ["id"], unique=True
    )
    op.create_table(
        "record_relation_link",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("owner_id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("source_entity_id", sa.UUID(), nullable=True),
        sa.Column("source_field_id", sa.UUID(), nullable=True),
        sa.Column("source_record_id", sa.UUID(), nullable=True),
        sa.Column("target_entity_id", sa.UUID(), nullable=True),
        sa.Column("target_record_id", sa.UUID(), nullable=True),
        sa.ForeignKeyConstraint(
            ["source_entity_id"], ["entity.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["source_field_id"], ["field_metadata.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["source_record_id"], ["record.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["target_entity_id"], ["entity.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["target_record_id"], ["record.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "source_record_id",
            "source_field_id",
            "target_record_id",
            name="uq_record_relation_link_triple",
        ),
    )
    op.create_index(
        "idx_record_relation_field_target",
        "record_relation_link",
        ["source_field_id", "target_record_id"],
        unique=False,
    )
    op.create_index(
        "idx_record_relation_owner", "record_relation_link", ["owner_id"], unique=False
    )
    op.create_index(
        "idx_record_relation_source",
        "record_relation_link",
        ["source_record_id", "source_field_id"],
        unique=False,
    )
    op.create_index(
        "idx_record_relation_target",
        "record_relation_link",
        ["target_record_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_record_relation_link_owner_id"),
        "record_relation_link",
        ["owner_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        op.f("ix_record_relation_link_owner_id"), table_name="record_relation_link"
    )
    op.drop_index("idx_record_relation_target", table_name="record_relation_link")
    op.drop_index("idx_record_relation_source", table_name="record_relation_link")
    op.drop_index("idx_record_relation_owner", table_name="record_relation_link")
    op.drop_index("idx_record_relation_field_target", table_name="record_relation_link")
    op.drop_table("record_relation_link")
    op.drop_index(op.f("ix_case_record_link_id"), table_name="case_record_link")
    op.drop_index("idx_case_record_entity", table_name="case_record_link")
    op.drop_index("idx_case_record_case", table_name="case_record_link")
    op.drop_table("case_record_link")
    op.drop_index(op.f("ix_record_id"), table_name="record")
    op.drop_index("idx_record_owner_created", table_name="record")
    op.drop_index("idx_record_gin", table_name="record", postgresql_using="gin")
    op.drop_index("idx_record_entity_id", table_name="record")
    op.drop_table("record")
    op.drop_index(op.f("ix_field_metadata_is_active"), table_name="field_metadata")
    op.drop_index(op.f("ix_field_metadata_field_key"), table_name="field_metadata")
    op.drop_index("idx_active_fields", table_name="field_metadata")
    op.drop_table("field_metadata")
    op.drop_index(op.f("ix_entity_name"), table_name="entity")
    op.drop_index(op.f("ix_entity_is_active"), table_name="entity")
    op.drop_index(op.f("ix_entity_id"), table_name="entity")
    op.drop_table("entity")
    # ### end Alembic commands ###
