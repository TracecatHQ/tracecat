"""WorkspaceIntegration -> OAuthIntegration

Revision ID: f1654d579c16
Revises: fa502336c577
Create Date: 2025-06-19 00:02:41.170871

"""

from collections.abc import Sequence

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "f1654d579c16"
down_revision: str | None = "fa502336c577"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "oauth_integration",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("id", sqlmodel.sql.sqltypes.GUID(), nullable=False),
        sa.Column("owner_id", sa.UUID(), nullable=True),
        sa.Column("user_id", sqlmodel.sql.sqltypes.GUID(), nullable=True),
        sa.Column("provider_id", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("encrypted_access_token", sa.LargeBinary(), nullable=False),
        sa.Column("encrypted_refresh_token", sa.LargeBinary(), nullable=True),
        sa.Column("token_type", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("expires_at", sa.TIMESTAMP(timezone=True), nullable=True),
        sa.Column("scope", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("meta", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(["owner_id"], ["workspace.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["user_id"], ["user.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "owner_id", "provider_id", name="uq_oauth_integration_owner_provider"
        ),
    )
    op.create_index(
        op.f("ix_oauth_integration_id"), "oauth_integration", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_oauth_integration_provider_id"),
        "oauth_integration",
        ["provider_id"],
        unique=False,
    )
    op.drop_index("ix_workspace_integration_id", table_name="workspace_integration")
    op.drop_index(
        "ix_workspace_integration_provider_id", table_name="workspace_integration"
    )
    op.drop_table("workspace_integration")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "workspace_integration",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("owner_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("provider_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("token_type", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "expires_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("scope", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "meta",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "encrypted_access_token",
            postgresql.BYTEA(),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "encrypted_refresh_token",
            postgresql.BYTEA(),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["owner_id"],
            ["workspace.id"],
            name="workspace_integration_owner_id_fkey",
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name="workspace_integration_user_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="workspace_integration_pkey"),
        sa.UniqueConstraint(
            "owner_id",
            "provider_id",
            name="uq_workspace_integration_owner_provider",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        "ix_workspace_integration_provider_id",
        "workspace_integration",
        ["provider_id"],
        unique=False,
    )
    op.create_index(
        "ix_workspace_integration_id", "workspace_integration", ["id"], unique=True
    )
    op.drop_index(
        op.f("ix_oauth_integration_provider_id"), table_name="oauth_integration"
    )
    op.drop_index(op.f("ix_oauth_integration_id"), table_name="oauth_integration")
    op.drop_table("oauth_integration")
    # ### end Alembic commands ###
