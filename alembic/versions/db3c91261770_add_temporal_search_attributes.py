"""Add Temporal search attributes

Revision ID: db3c91261770
Revises: 849db8d3b59d
Create Date: 2025-01-18 21:27:38.967454

"""

import asyncio
from collections.abc import Sequence

from temporalio.api.enums.v1 import IndexedValueType
from temporalio.api.operatorservice.v1 import (
    AddSearchAttributesRequest,
    RemoveSearchAttributesRequest,
)
from tenacity import (
    retry,
    retry_if_exception_type,
    stop_after_attempt,
    wait_exponential,
)

from tracecat.config import (
    TEMPORAL__API_KEY,
    TEMPORAL__API_KEY__ARN,
    TEMPORAL__CLUSTER_NAMESPACE,
)
from tracecat.dsl.client import get_temporal_client
from tracecat.logger import logger

# revision identifiers, used by Alembic.
revision: str = "db3c91261770"
down_revision: str | None = "849db8d3b59d"
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=5, min=5, max=20),
    retry=retry_if_exception_type(Exception),
    reraise=True,
)
async def add_temporal_search_attributes():
    client = await get_temporal_client()
    await client.operator_service.add_search_attributes(
        AddSearchAttributesRequest(
            search_attributes={
                "TracecatTriggerType": IndexedValueType.INDEXED_VALUE_TYPE_KEYWORD,
                "TracecatTriggeredByUserId": IndexedValueType.INDEXED_VALUE_TYPE_KEYWORD,
            },
            namespace=TEMPORAL__CLUSTER_NAMESPACE,
        )
    )
    logger.info("Temporal search attributes added")


@retry(
    stop=stop_after_attempt(5),
    wait=wait_exponential(multiplier=5, min=5, max=20),
    retry=retry_if_exception_type(Exception),
    reraise=True,
)
async def remove_temporal_search_attributes():
    client = await get_temporal_client()
    await client.operator_service.remove_search_attributes(
        RemoveSearchAttributesRequest(
            search_attributes=["TracecatTriggerType", "TracecatTriggeredByUserId"],
            namespace=TEMPORAL__CLUSTER_NAMESPACE,
        )
    )
    logger.info("Temporal search attributes removed")


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if TEMPORAL__API_KEY__ARN or TEMPORAL__API_KEY:
        logger.warning(
            "Using Temporal cloud, skipping add search attributes."
            " Please add search attributes (TracecatTriggerType, TracecatTriggeredByUserId) "
            "through the cloud UI or `tcld`."
        )
    else:
        asyncio.run(add_temporal_search_attributes())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    if TEMPORAL__API_KEY__ARN or TEMPORAL__API_KEY:
        logger.warning(
            "Using Temporal cloud, skipping remove search attributes."
            " Please remove search attributes (TracecatTriggerType, TracecatTriggeredByUserId) "
            "through the cloud UI or `tcld`."
        )
    else:
        asyncio.run(remove_temporal_search_attributes())
    # ### end Alembic commands ###
