type: action
definition:
  title: Extract data
  description: Extract data into a table format (list of objects, markdown, or csv).
  display_group: Extract Data
  doc_url: https://github.com/ollama/ollama/blob/main/README.md
  namespace: ollama.extract_data
  name: extract_data
  expects:
    input:
      type: str | list[str] | dict[str, any]
      description: Input data.
    input_context:
      type: str
      description: Description of the input data (e.g. "Job description").
    output_name:
      type: str
      description: Data value to extract in plural form (e.g. "locations").
    output_schema:
      type: dict[str, dict[str, str]]
      description: JSON Schema properties to extract.
    output_format:
      type: enum["markdown", "csv"] | None
      description: Format of the output data. If None, the output will be a list of objects.
      default: None
    model:
      type: str
      description: Model to use for extraction.
      default: gemma3:1b-it-q8_0
  steps:
    - ref: extract_data
      action: llm.ollama.call
      args:
        model: ${{ inputs.model }}
        prompt: |
          <input_data>
          ${{ inputs.input }}
          </input_data>
        system_prompt: |
          <context>
          You are an expert at structured data extraction.
          </context>

          <task>
          Extract data from the input data representing a ${{ FN.lowercase(inputs.input_context) }}.
          </task>
        format:
          type: object
          properties:
            ${{ inputs.output_name }}:
              type: array
              items:
                type: object
                properties: ${{ inputs.output_schema }}
                required: ${{ FN.to_keys(inputs.output_schema) }}
                additionalProperties: false
                strict: true
              description: ${{ inputs.output_context }}
          required:
            - ${{ inputs.output_name }}
          additionalProperties: false
          strict: true
    - ref: deserialize_data
      action: core.transform.reshape
      args:
        value: ${{ FN.deserialize_json(steps.extract_data.result.message.content) }}
    - ref: format_data
      action: core.transform.reshape
      args:
        value: |
          ${{ steps.deserialize_data.result if inputs.output_format else FN.format_table(steps.deserialize_data.result, inputs.output_format) }}
  returns: ${{ steps.format_data.result }}
