type: action
definition:
  title: Extract one
  description: Extract one data value from given input data using Ollama LLMs.
  display_group: Extract
  namespace: ollama.extract_one
  name: extract_one
  expects:
    input:
      type: str | list[str] | dict[str, any]
      description: Input data.
    input_context:
      type: str
      description: Description of the input data (e.g. "Job description").
    output_name:
      type: str
      description: Data value to extract (e.g. "location").
    output_type:
      type: enum["string", "number", "integer", "boolean"]
      description: Data type of the data to extract (e.g. "string").
    output_context:
      type: str
      description: >
        Description of the data to extract (e.g. "Location given by city and state (e.g. 'San Francisco, CA')").
    model:
      type: str
      description: Model to use for extraction.
      default: gemma3:1b-it-q8_0
    base_url:
      type: str
      description: Base URL for the Ollama API.
      default: http://ollama:11434
  steps:
    - ref: extract_one
      action: llm.ollama.call
      args:
        model: ${{ inputs.model }}
        base_url: ${{ inputs.base_url }}
        prompt: >
          <input_data>
          ${{ inputs.input }}
          </input_data>
        system_prompt: >
          <context>
          You are an expert at structured data extraction.
          </context>

          <task>
          Extract a single ${{ inputs.output_name }} from the input data representing a ${{ FN.lowercase(inputs.input_context) }}.
          </task>
        format:
          type: object
          properties:
            ${{ inputs.output_name }}:
              type: ${{ inputs.output_type }}
              description: ${{ inputs.output_context }}
          required:
            - ${{ inputs.output_name }}
          additionalProperties: false
          strict: true
    - ref: output
      action: core.transform.reshape
      args:
        value: ${{ FN.deserialize_json(steps.extract_one.result.message.content) }}
  returns: ${{ FN.lookup(steps.output.result, inputs.output_name) }}
