type: action
definition:
  title: List Wiz issues
  description: |
    Given Wiz `service_source` (e.g. 'wiz'), return list of issues filtered by `start_time` and `end_time`.
    Returns medium, high, and critical open issues by default.

    Requires secret named `wiz` with keys:
    - WIZ_GRAPHQL_URL
    - WIZ_AUTH_URL
    - WIZ_CLIENT_ID
    - WIZ_CLIENT_SECRET
  display_group: Wiz
  namespace: integrations.wiz
  name: list_issues
  expects:
    start_time:
      type: datetime
      description: Start ISO datetime for the query (inclusive)
    end_time:
      type: datetime
      description: End ISO datetime for the query (exclusive)
    status:
      type: list[str]
      description: Status of the issue (OPEN, IN_PROGRESS, RESOLVED, or REJECTED)
      default:
        - OPEN
        - IN_PROGRESS
        # - RESOLVED
        # - REJECTED
    severity:
      type: list[str]
      description: Severity of the issue (INFORMATIONAL, LOW, MEDIUM, HIGH, or CRITICAL)
      default:
        # - INFORMATIONAL
        # - LOW
        - MEDIUM
        - HIGH
        - CRITICAL
    type:
      # Must be one of: "TOXIC_COMBINATION", "THREAT_DETECTION", "CLOUD_CONFIGURATION"
      type: list[str]
      description: Type of the issue (TOXIC_COMBINATION, THREAT_DETECTION, or CLOUD_CONFIGURATION)
      default:
        - TOXIC_COMBINATION
        - THREAT_DETECTION
        - CLOUD_CONFIGURATION
    limit:
      type: int
      description: Maximum number of issues to return
      default: 100
  steps:
    - ref: list_alerts
      action: core.http_request
      args:
        method: GET
        url: ${{ SECRETS.wiz.WIZ_GRAPHQL_URL }}
        oauth2_url: ${{ SECRETS.wiz.WIZ_AUTH_URL }}
        oauth2_client_id: ${{ SECRETS.wiz.WIZ_CLIENT_ID }}
        oauth2_client_secret: ${{ SECRETS.wiz.WIZ_CLIENT_SECRET }}
        oauth2_headers:
          audience: wiz-api
        oauth2_grant_type: client_credentials
        payload:
          query: >-
            query IssuesTable($first: Int, $after: String, $filterBy: IssueFilters) {
              issues: issuesV2(first: $first, after: $after, filterBy: $filterBy) {
                nodes {
                  id
                  control {
                    id
                    name
                    description
                    resolutionRecommendation
                    securitySubCategories {
                      title
                      category {
                        name
                        framework {
                          name
                        }
                      }
                    }
                  }
                  createdAt
                  updatedAt
                  sourceRule {
                    id
                    name
                  }
                  dueAt
                  resolvedAt
                  statusChangedAt
                  project {
                    id
                    name
                    slug
                    businessUnit
                    riskProfile {
                      businessImpact
                    }
                  }
                  status
                  severity
                  type
                  entitySnapshot {
                    id
                    type
                    nativeType
                    name
                    status
                    cloudPlatform
                    cloudProviderURL
                    providerId
                    region
                    resourceGroupExternalId
                    subscriptionExternalId
                    subscriptionName
                    subscriptionTags
                    tags
                    externalId
                  }
                  notes {
                    createdAt
                    updatedAt
                    text
                    user {
                      name
                      email
                    }
                    serviceAccount {
                      name
                    }
                  }
                  serviceTickets {
                    externalId
                    name
                    url
                  }
                }
                pageInfo {
                  hasNextPage
                  endCursor
                }
              }
            }
          variables:
            first: ${{ inputs.limit }}
            after: ${{ inputs.endCursor || null }}
            filterBy:
              status: ${{ inputs.status }}
              severity: ${{ inputs.severity }}
              type: ${{ inputs.type }}
              createdAt:
                after: ${{ FN.to_datestring(inputs.start_time, "%Y-%m-%dT%H:%M:%SZ") }}
                before: ${{ FN.to_datestring(inputs.end_time, "%Y-%m-%dT%H:%M:%SZ") }}
  returns: ${{ steps.list_alerts.result }}
