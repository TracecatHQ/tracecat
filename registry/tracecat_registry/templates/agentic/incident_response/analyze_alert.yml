type: action
definition:
  title: Analyze alert
  description: |
    Extract who, what, when, where, why, how from the alert.
    Suggest scenarios where the alert is a false positive or a true positive.
  display_group: Agents
  namespace: agentic
  name: analyze_alert
  expects:
    alert:
      type: dict[str, any]
      description: Alert to analyze.
    alert_context:
      type: str
      description: What are the alerts about? Where did they come from?
    analyst_context:
      type: str
      description: >
        Who is the analyst examining these alerts?
        What is their role? For what organization?
    example_response:
      type: dict[str, any] | None
      description: >
        An example response from the model to improve the quality of the output.
        Must fit the structured output schema. See `one_shot` step for an example.
      default: null
  steps:
    - ref: one_shot
      action: core.transform.reshape
      args:
        value: {
          "thoughts": [
            "This alert indicates a potential unauthorized access attempt",
            "The source IP is from a country not typically associated with this user",
            "The login occurred outside normal business hours",
            "Multiple failed attempts preceded the successful login"
          ],
          "who": "User jsmith@acme.com (employee) from IP address 45.67.89.123",
          "what": "Successful login after multiple failed attempts from an unusual location",
          "when": "2023-07-12T03:45:18Z (outside normal business hours)",
          "where": "Via VPN from IP 45.67.89.123 (geo: Ukraine) to the corporate authentication portal",
          "why": "Possible credential theft and unauthorized access attempt to corporate resources",
          "how": "Multiple password attempts suggesting either password guessing or stolen credentials",
          "false_positives": [
            {
              "scenario": "Employee traveling internationally",
              "reasoning": "The employee could be on a business trip to Ukraine without updating their travel status"
            },
            {
              "scenario": "VPN endpoint misattribution",
              "reasoning": "The geolocation service might have incorrectly mapped the IP address to Ukraine"
            }
          ],
          "true_positives": [
            {
              "scenario": "Credential theft",
              "reasoning": "The multiple failed login attempts followed by success suggests password guessing or brute force"
            },
            {
              "scenario": "Insider threat",
              "reasoning": "The employee might be accessing systems from an unusual location intentionally to exfiltrate data"
            }
          ]
        }

    - ref: structured_output
      action: core.transform.reshape
      args:
        value:
          type: json_schema
          name: alert_analysis
          strict: true
          schema:
            type: object
            required:
              - thoughts
              - who
              - what
              - when
              - where
              - why
              - how
            additionalProperties: false
            properties:
              thoughts:
                type: array
                items:
                  type: string
              who:
                type: string
              what:
                type: string
              when:
                type: string
              where:
                type: string
              why:
                type: string
              how:
                type: string
              false_positives:
                type: array
                items:
                  type: object
                  properties:
                    scenario:
                      type: string
                    reasoning:
                      type: string
              true_positives:
                type: array
                items:
                  type: object
                  properties:
                    scenario:
                      type: string
                    reasoning:
                      type: string
    - ref: analyze_alert
      action: llm.openai.call
      args:
        prompt: >
          <alert>
          ${{ inputs.alert }}
          </alert>
        instructions: >
          <alert_context>
          ${{ inputs.alert_context }}
          </alert_context>

          <analyst_context>
          ${{ inputs.analyst_context }}
          </analyst_context>

          <analysis_process>
          Approach this analysis systematically:
          1. First review the entire alert to understand the full context
          2. Identify fields that could indicate malicious activity
          3. Look for relationships between fields
          4. Consider what additional context might be needed
          </analysis_process>

          <guidance>
          - You must reference actual values from the alert and the context provided
          - You must think critically about the alert and the context provided
          - Your output must be formatted as JSON.
          </guidance>

          <example_response>
          ${{ inputs.example_response || steps.one_shot.result }}
          </example_response>

          <task>
          Analyze the alert by:
          - Extracting who, what, when, where, why, how from the alert
          - Suggesting scenarios where the alert is a false positive
          - Suggesting scenarios where the alert is a true positive
          </task>
        text_format: ${{ steps.structured_output.result }}
  returns: ${{ FN.deserialize_json(steps.analyze_alert.result.output_text) }}
