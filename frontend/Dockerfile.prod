# Multi-stage production Dockerfile for next.js

### Stage: Dependencies
FROM node:18-alpine AS deps
WORKDIR /app

RUN apk add --no-cache libc6-compat

# Copy only the files needed to install dependencies
COPY package.json pnpm-lock.yaml* ./

# Install dependencies with pnpm
RUN corepack enable pnpm && pnpm i --frozen-lockfile

### Stage: Build
FROM node:18-alpine AS builder
WORKDIR /app

COPY --from=deps /app/node_modules ./node_modules

COPY . /app

### Stage: Final
FROM node:18-alpine AS runner
WORKDIR /app

ENV NODE_ENV production

# Create non-admin nextjs user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy public assets
COPY --from=builder /app/public ./public

# Set the correct permission for prerender cache
RUN mkdir .next
RUN chown nextjs:nodejs .next

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch into non-admin user
USER nextjs

EXPOSE 3000

CMD ["pnpm", "start"]
