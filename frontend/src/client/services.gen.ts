// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { PublicIncomingWebhookData, PublicIncomingWebhookResponse, PublicIncomingWebhookWaitData, PublicIncomingWebhookWaitResponse, PublicWebhookCallbackData, PublicWebhookCallbackResponse, WorkspacesListWorkspacesResponse, WorkspacesCreateWorkspaceData, WorkspacesCreateWorkspaceResponse, WorkspacesGetWorkspaceData, WorkspacesGetWorkspaceResponse, WorkspacesUpdateWorkspaceData, WorkspacesUpdateWorkspaceResponse, WorkspacesDeleteWorkspaceData, WorkspacesDeleteWorkspaceResponse, WorkspacesListWorkspaceMembershipsData, WorkspacesListWorkspaceMembershipsResponse, WorkspacesCreateWorkspaceMembershipData, WorkspacesCreateWorkspaceMembershipResponse, WorkspacesGetWorkspaceMembershipData, WorkspacesGetWorkspaceMembershipResponse, WorkspacesDeleteWorkspaceMembershipData, WorkspacesDeleteWorkspaceMembershipResponse, WorkflowsListWorkflowsData, WorkflowsListWorkflowsResponse, WorkflowsCreateWorkflowData, WorkflowsCreateWorkflowResponse, WorkflowsGetWorkflowData, WorkflowsGetWorkflowResponse, WorkflowsUpdateWorkflowData, WorkflowsUpdateWorkflowResponse, WorkflowsDeleteWorkflowData, WorkflowsDeleteWorkflowResponse, WorkflowsCommitWorkflowData, WorkflowsCommitWorkflowResponse, WorkflowsGetWorkflowDefinitionData, WorkflowsGetWorkflowDefinitionResponse, WorkflowsCreateWorkflowDefinitionData, WorkflowsCreateWorkflowDefinitionResponse, TriggersCreateWebhookData, TriggersCreateWebhookResponse, TriggersGetWebhookData, TriggersGetWebhookResponse, TriggersUpdateWebhookData, TriggersUpdateWebhookResponse, WorkflowExecutionsListWorkflowExecutionsData, WorkflowExecutionsListWorkflowExecutionsResponse, WorkflowExecutionsCreateWorkflowExecutionData, WorkflowExecutionsCreateWorkflowExecutionResponse, WorkflowExecutionsGetWorkflowExecutionData, WorkflowExecutionsGetWorkflowExecutionResponse, WorkflowExecutionsListWorkflowExecutionEventHistoryData, WorkflowExecutionsListWorkflowExecutionEventHistoryResponse, WorkflowExecutionsCancelWorkflowExecutionData, WorkflowExecutionsCancelWorkflowExecutionResponse, WorkflowExecutionsTerminateWorkflowExecutionData, WorkflowExecutionsTerminateWorkflowExecutionResponse, ActionsListActionsData, ActionsListActionsResponse, ActionsCreateActionData, ActionsCreateActionResponse, ActionsGetActionData, ActionsGetActionResponse, ActionsUpdateActionData, ActionsUpdateActionResponse, ActionsDeleteActionData, ActionsDeleteActionResponse, UdfsListUdfsData, UdfsListUdfsResponse, UdfsGetUdfData, UdfsGetUdfResponse, UdfsCreateUdfData, UdfsCreateUdfResponse, UdfsValidateUdfArgsData, UdfsValidateUdfArgsResponse, CasesCreateCaseData, CasesCreateCaseResponse, CasesListCasesData, CasesListCasesResponse, CasesGetCaseData, CasesGetCaseResponse, CasesUpdateCaseData, CasesUpdateCaseResponse, CasesCreateCaseEventData, CasesCreateCaseEventResponse, CasesListCaseEventsData, CasesListCaseEventsResponse, CasesGetCaseEventData, CasesGetCaseEventResponse, CasesListCaseActionsData, CasesListCaseActionsResponse, CasesCreateCaseActionData, CasesCreateCaseActionResponse, CasesDeleteCaseActionData, CasesDeleteCaseActionResponse, CasesListCaseContextsData, CasesListCaseContextsResponse, CasesCreateCaseContextData, CasesCreateCaseContextResponse, CasesDeleteCaseContextData, CasesDeleteCaseContextResponse, SecretsListSecretsData, SecretsListSecretsResponse, SecretsCreateSecretData, SecretsCreateSecretResponse, SecretsGetSecretData, SecretsGetSecretResponse, SecretsUpdateSecretByIdData, SecretsUpdateSecretByIdResponse, SecretsDeleteSecretByIdData, SecretsDeleteSecretByIdResponse, SecretsSearchSecretsData, SecretsSearchSecretsResponse, SchedulesListSchedulesData, SchedulesListSchedulesResponse, SchedulesCreateScheduleData, SchedulesCreateScheduleResponse, SchedulesGetScheduleData, SchedulesGetScheduleResponse, SchedulesUpdateScheduleData, SchedulesUpdateScheduleResponse, SchedulesDeleteScheduleData, SchedulesDeleteScheduleResponse, SchedulesSearchSchedulesData, SchedulesSearchSchedulesResponse, ValidationValidateWorkflowData, ValidationValidateWorkflowResponse, UsersSearchUserData, UsersSearchUserResponse, UsersUsersCurrentUserResponse, UsersUsersPatchCurrentUserData, UsersUsersPatchCurrentUserResponse, UsersUsersUserData, UsersUsersUserResponse, UsersUsersPatchUserData, UsersUsersPatchUserResponse, UsersUsersDeleteUserData, UsersUsersDeleteUserResponse, AuthAuthDatabaseLoginData, AuthAuthDatabaseLoginResponse, AuthAuthDatabaseLogoutResponse, AuthRegisterRegisterData, AuthRegisterRegisterResponse, AuthResetForgotPasswordData, AuthResetForgotPasswordResponse, AuthResetResetPasswordData, AuthResetResetPasswordResponse, AuthVerifyRequestTokenData, AuthVerifyRequestTokenResponse, AuthVerifyVerifyData, AuthVerifyVerifyResponse, AuthOauthGoogleDatabaseAuthorizeData, AuthOauthGoogleDatabaseAuthorizeResponse, AuthOauthGoogleDatabaseCallbackData, AuthOauthGoogleDatabaseCallbackResponse, PublicCheckHealthResponse } from './types.gen';

/**
 * Incoming Webhook
 * Webhook endpoint to trigger a workflow.
 *
 * This is an external facing endpoint is used to trigger a workflow by sending a webhook request.
 * The workflow is identified by the `path` parameter, which is equivalent to the workflow id.
 * @param data The data for the request.
 * @param data.path
 * @param data.secret
 * @param data.validateMethod
 * @param data.xTracecatEnableRuntimeTests
 * @param data.requestBody
 * @returns CreateWorkflowExecutionResponse Successful Response
 * @throws ApiError
 */
export const publicIncomingWebhook = (data: PublicIncomingWebhookData): CancelablePromise<PublicIncomingWebhookResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/webhooks/{path}/{secret}',
    path: {
        path: data.path,
        secret: data.secret
    },
    headers: {
        'x-tracecat-enable-runtime-tests': data.xTracecatEnableRuntimeTests
    },
    query: {
        validate_method: data.validateMethod
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Incoming Webhook Wait
 * Webhook endpoint to trigger a workflow.
 *
 * This is an external facing endpoint is used to trigger a workflow by sending a webhook request.
 * The workflow is identified by the `path` parameter, which is equivalent to the workflow id.
 * @param data The data for the request.
 * @param data.path
 * @param data.secret
 * @param data.validateMethod
 * @param data.xTracecatEnableRuntimeTests
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const publicIncomingWebhookWait = (data: PublicIncomingWebhookWaitData): CancelablePromise<PublicIncomingWebhookWaitResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/webhooks/{path}/{secret}/wait',
    path: {
        path: data.path,
        secret: data.secret
    },
    headers: {
        'x-tracecat-enable-runtime-tests': data.xTracecatEnableRuntimeTests
    },
    query: {
        validate_method: data.validateMethod
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Webhook Callback
 * Receive a callback from an external service.
 *
 * This can be used to trigger a workflow from an external service, or perform some other actions.
 * @param data The data for the request.
 * @param data.service
 * @returns string Successful Response
 * @throws ApiError
 */
export const publicWebhookCallback = (data: PublicWebhookCallbackData): CancelablePromise<PublicWebhookCallbackResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/callback/{service}',
    path: {
        service: data.service
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Workspaces
 * List workspaces.
 *
 * Access Level
 * ------------
 * - Basic: Can list workspaces where they are a member.
 * - Admin: Can list all workspaces regardless of membership.
 * @returns WorkspaceMetadataResponse Successful Response
 * @throws ApiError
 */
export const workspacesListWorkspaces = (): CancelablePromise<WorkspacesListWorkspacesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workspaces'
}); };

/**
 * Create Workspace
 * Create a new workspace.
 *
 * Access Level
 * ------------
 * - Admin: Can create a workspace for any user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns WorkspaceMetadataResponse Successful Response
 * @throws ApiError
 */
export const workspacesCreateWorkspace = (data: WorkspacesCreateWorkspaceData): CancelablePromise<WorkspacesCreateWorkspaceResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workspaces',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workspace
 * Return Workflow as title, description, list of Action JSONs, adjacency list of Action IDs.
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns WorkspaceResponse Successful Response
 * @throws ApiError
 */
export const workspacesGetWorkspace = (data: WorkspacesGetWorkspaceData): CancelablePromise<WorkspacesGetWorkspaceResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workspaces/{workspace_id}',
    path: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Workspace
 * Update a workspace.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const workspacesUpdateWorkspace = (data: WorkspacesUpdateWorkspaceData): CancelablePromise<WorkspacesUpdateWorkspaceResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/workspaces/{workspace_id}',
    path: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Workspace
 * Delete a workspace.
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns void Successful Response
 * @throws ApiError
 */
export const workspacesDeleteWorkspace = (data: WorkspacesDeleteWorkspaceData): CancelablePromise<WorkspacesDeleteWorkspaceResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/workspaces/{workspace_id}',
    path: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Workspace Memberships
 * List memberships of a workspace.
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns WorkspaceMembershipResponse Successful Response
 * @throws ApiError
 */
export const workspacesListWorkspaceMemberships = (data: WorkspacesListWorkspaceMembershipsData): CancelablePromise<WorkspacesListWorkspaceMembershipsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workspaces/{workspace_id}/memberships',
    path: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Workspace Membership
 * Create a workspace membership for a user.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const workspacesCreateWorkspaceMembership = (data: WorkspacesCreateWorkspaceMembershipData): CancelablePromise<WorkspacesCreateWorkspaceMembershipResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workspaces/{workspace_id}/memberships',
    path: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workspace Membership
 * Get a workspace membership for a user.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.userId
 * @returns WorkspaceMembershipResponse Successful Response
 * @throws ApiError
 */
export const workspacesGetWorkspaceMembership = (data: WorkspacesGetWorkspaceMembershipData): CancelablePromise<WorkspacesGetWorkspaceMembershipResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workspaces/{workspace_id}/memberships/{user_id}',
    path: {
        workspace_id: data.workspaceId,
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Workspace Membership
 * Delete a workspace membership.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.userId
 * @returns void Successful Response
 * @throws ApiError
 */
export const workspacesDeleteWorkspaceMembership = (data: WorkspacesDeleteWorkspaceMembershipData): CancelablePromise<WorkspacesDeleteWorkspaceMembershipResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/workspaces/{workspace_id}/memberships/{user_id}',
    path: {
        workspace_id: data.workspaceId,
        user_id: data.userId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Workflows
 * List workflows.
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns WorkflowMetadataResponse Successful Response
 * @throws ApiError
 */
export const workflowsListWorkflows = (data: WorkflowsListWorkflowsData): CancelablePromise<WorkflowsListWorkflowsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows',
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Workflow
 * Create a new Workflow.
 *
 * Optionally, you can provide a YAML file to create a workflow.
 * You can also provide a title and description to create a blank workflow.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.formData
 * @returns WorkflowMetadataResponse Successful Response
 * @throws ApiError
 */
export const workflowsCreateWorkflow = (data: WorkflowsCreateWorkflowData): CancelablePromise<WorkflowsCreateWorkflowResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows',
    query: {
        workspace_id: data.workspaceId
    },
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workflow
 * Return Workflow as title, description, list of Action JSONs, adjacency list of Action IDs.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @returns WorkflowResponse Successful Response
 * @throws ApiError
 */
export const workflowsGetWorkflow = (data: WorkflowsGetWorkflowData): CancelablePromise<WorkflowsGetWorkflowResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Workflow
 * Update a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const workflowsUpdateWorkflow = (data: WorkflowsUpdateWorkflowData): CancelablePromise<WorkflowsUpdateWorkflowResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/workflows/{workflow_id}',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Workflow
 * Delete a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @returns void Successful Response
 * @throws ApiError
 */
export const workflowsDeleteWorkflow = (data: WorkflowsDeleteWorkflowData): CancelablePromise<WorkflowsDeleteWorkflowResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/workflows/{workflow_id}',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Commit Workflow
 * Commit a workflow.
 *
 * This deploys the workflow and updates its version. If a YAML file is provided, it will override the workflow in the database.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @returns CommitWorkflowResponse Successful Response
 * @throws ApiError
 */
export const workflowsCommitWorkflow = (data: WorkflowsCommitWorkflowData): CancelablePromise<WorkflowsCommitWorkflowResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/commit',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workflow Definition
 * Get the latest version of a workflow definition.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @param data.version
 * @returns WorkflowDefinition Successful Response
 * @throws ApiError
 */
export const workflowsGetWorkflowDefinition = (data: WorkflowsGetWorkflowDefinitionData): CancelablePromise<WorkflowsGetWorkflowDefinitionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/definition',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        version: data.version,
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Workflow Definition
 * Get the latest version of a workflow definition.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @returns WorkflowDefinition Successful Response
 * @throws ApiError
 */
export const workflowsCreateWorkflowDefinition = (data: WorkflowsCreateWorkflowDefinitionData): CancelablePromise<WorkflowsCreateWorkflowDefinitionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/definition',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Webhook
 * Create a webhook for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const triggersCreateWebhook = (data: TriggersCreateWebhookData): CancelablePromise<TriggersCreateWebhookResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/webhook',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Webhook
 * Get the webhook from a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @returns WebhookResponse Successful Response
 * @throws ApiError
 */
export const triggersGetWebhook = (data: TriggersGetWebhookData): CancelablePromise<TriggersGetWebhookResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/webhook',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Webhook
 * Update the webhook for a workflow. We currently supprt only one webhook per workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const triggersUpdateWebhook = (data: TriggersUpdateWebhookData): CancelablePromise<TriggersUpdateWebhookResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/workflows/{workflow_id}/webhook',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Workflow Executions
 * List all workflow executions.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.workflowId
 * @returns WorkflowExecutionResponse Successful Response
 * @throws ApiError
 */
export const workflowExecutionsListWorkflowExecutions = (data: WorkflowExecutionsListWorkflowExecutionsData): CancelablePromise<WorkflowExecutionsListWorkflowExecutionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflow-executions',
    query: {
        workflow_id: data.workflowId,
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Workflow Execution
 * Create and schedule a workflow execution.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns CreateWorkflowExecutionResponse Successful Response
 * @throws ApiError
 */
export const workflowExecutionsCreateWorkflowExecution = (data: WorkflowExecutionsCreateWorkflowExecutionData): CancelablePromise<WorkflowExecutionsCreateWorkflowExecutionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflow-executions',
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workflow Execution
 * Get a workflow execution.
 * @param data The data for the request.
 * @param data.executionId
 * @param data.workspaceId
 * @returns WorkflowExecutionResponse Successful Response
 * @throws ApiError
 */
export const workflowExecutionsGetWorkflowExecution = (data: WorkflowExecutionsGetWorkflowExecutionData): CancelablePromise<WorkflowExecutionsGetWorkflowExecutionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflow-executions/{execution_id}',
    path: {
        execution_id: data.executionId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Workflow Execution Event History
 * Get a workflow execution.
 * @param data The data for the request.
 * @param data.executionId
 * @param data.workspaceId
 * @returns EventHistoryResponse Successful Response
 * @throws ApiError
 */
export const workflowExecutionsListWorkflowExecutionEventHistory = (data: WorkflowExecutionsListWorkflowExecutionEventHistoryData): CancelablePromise<WorkflowExecutionsListWorkflowExecutionEventHistoryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflow-executions/{execution_id}/history',
    path: {
        execution_id: data.executionId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Cancel Workflow Execution
 * Get a workflow execution.
 * @param data The data for the request.
 * @param data.executionId
 * @param data.workspaceId
 * @returns void Successful Response
 * @throws ApiError
 */
export const workflowExecutionsCancelWorkflowExecution = (data: WorkflowExecutionsCancelWorkflowExecutionData): CancelablePromise<WorkflowExecutionsCancelWorkflowExecutionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflow-executions/{execution_id}/cancel',
    path: {
        execution_id: data.executionId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Terminate Workflow Execution
 * Get a workflow execution.
 * @param data The data for the request.
 * @param data.executionId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const workflowExecutionsTerminateWorkflowExecution = (data: WorkflowExecutionsTerminateWorkflowExecutionData): CancelablePromise<WorkflowExecutionsTerminateWorkflowExecutionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflow-executions/{execution_id}/terminate',
    path: {
        execution_id: data.executionId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Actions
 * List all actions for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @returns ActionMetadataResponse Successful Response
 * @throws ApiError
 */
export const actionsListActions = (data: ActionsListActionsData): CancelablePromise<ActionsListActionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/actions',
    query: {
        workflow_id: data.workflowId,
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Action
 * Create a new action for a workflow.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns ActionMetadataResponse Successful Response
 * @throws ApiError
 */
export const actionsCreateAction = (data: ActionsCreateActionData): CancelablePromise<ActionsCreateActionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/actions',
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Action
 * Get an action.
 * @param data The data for the request.
 * @param data.actionId
 * @param data.workflowId
 * @param data.workspaceId
 * @returns ActionResponse Successful Response
 * @throws ApiError
 */
export const actionsGetAction = (data: ActionsGetActionData): CancelablePromise<ActionsGetActionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/actions/{action_id}',
    path: {
        action_id: data.actionId
    },
    query: {
        workflow_id: data.workflowId,
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Action
 * Update an action.
 * @param data The data for the request.
 * @param data.actionId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns ActionResponse Successful Response
 * @throws ApiError
 */
export const actionsUpdateAction = (data: ActionsUpdateActionData): CancelablePromise<ActionsUpdateActionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/actions/{action_id}',
    path: {
        action_id: data.actionId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Action
 * Delete an action.
 * @param data The data for the request.
 * @param data.actionId
 * @param data.workspaceId
 * @returns void Successful Response
 * @throws ApiError
 */
export const actionsDeleteAction = (data: ActionsDeleteActionData): CancelablePromise<ActionsDeleteActionResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/actions/{action_id}',
    path: {
        action_id: data.actionId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Udfs
 * List all user-defined function specifications for a user.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.limit
 * @param data.ns
 * @returns UDFSpec Successful Response
 * @throws ApiError
 */
export const udfsListUdfs = (data: UdfsListUdfsData): CancelablePromise<UdfsListUdfsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/udfs',
    query: {
        limit: data.limit,
        ns: data.ns,
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Udf
 * Get a user-defined function specification.
 * @param data The data for the request.
 * @param data.udfKey
 * @param data.workspaceId
 * @param data.namespace
 * @returns UDFSpec Successful Response
 * @throws ApiError
 */
export const udfsGetUdf = (data: UdfsGetUdfData): CancelablePromise<UdfsGetUdfResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/udfs/{udf_key}',
    path: {
        udf_key: data.udfKey
    },
    query: {
        namespace: data.namespace,
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Udf
 * Create a user-defined function specification.
 * @param data The data for the request.
 * @param data.udfKey
 * @param data.workspaceId
 * @returns UDFSpec Successful Response
 * @throws ApiError
 */
export const udfsCreateUdf = (data: UdfsCreateUdfData): CancelablePromise<UdfsCreateUdfResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/udfs/{udf_key}',
    path: {
        udf_key: data.udfKey
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Validate Udf Args
 * Validate user-defined function's arguments.
 * @param data The data for the request.
 * @param data.udfKey
 * @param data.workspaceId
 * @param data.requestBody
 * @returns UDFArgsValidationResponse Successful Response
 * @throws ApiError
 */
export const udfsValidateUdfArgs = (data: UdfsValidateUdfArgsData): CancelablePromise<UdfsValidateUdfArgsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/udfs/{udf_key}/validate',
    path: {
        udf_key: data.udfKey
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Case
 * Create a new case for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.requestBody
 * @returns CaseResponse Successful Response
 * @throws ApiError
 */
export const casesCreateCase = (data: CasesCreateCaseData): CancelablePromise<CasesCreateCaseResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/cases',
    path: {
        workflow_id: data.workflowId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Cases
 * List all cases for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.workspaceId
 * @param data.limit
 * @returns CaseResponse Successful Response
 * @throws ApiError
 */
export const casesListCases = (data: CasesListCasesData): CancelablePromise<CasesListCasesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/cases',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        limit: data.limit,
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Case
 * Get a specific case for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @param data.workspaceId
 * @returns CaseResponse Successful Response
 * @throws ApiError
 */
export const casesGetCase = (data: CasesGetCaseData): CancelablePromise<CasesGetCaseResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/cases/{case_id}',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Case
 * Update a specific case for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns CaseResponse Successful Response
 * @throws ApiError
 */
export const casesUpdateCase = (data: CasesUpdateCaseData): CancelablePromise<CasesUpdateCaseResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/cases/{case_id}',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Case Event
 * Create a new Case Event.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const casesCreateCaseEvent = (data: CasesCreateCaseEventData): CancelablePromise<CasesCreateCaseEventResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/cases/{case_id}/events',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Case Events
 * List all Case Events.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @param data.workspaceId
 * @returns CaseEvent Successful Response
 * @throws ApiError
 */
export const casesListCaseEvents = (data: CasesListCaseEventsData): CancelablePromise<CasesListCaseEventsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/cases/{case_id}/events',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Case Event
 * Get a specific case event.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @param data.eventId
 * @param data.workspaceId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const casesGetCaseEvent = (data: CasesGetCaseEventData): CancelablePromise<CasesGetCaseEventResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/cases/{case_id}/events/{event_id}',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId,
        event_id: data.eventId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Case Actions
 * List all case actions.
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns CaseAction Successful Response
 * @throws ApiError
 */
export const casesListCaseActions = (data: CasesListCaseActionsData): CancelablePromise<CasesListCaseActionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/case-actions',
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Case Action
 * Create a new case action.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns CaseAction Successful Response
 * @throws ApiError
 */
export const casesCreateCaseAction = (data: CasesCreateCaseActionData): CancelablePromise<CasesCreateCaseActionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/case-actions',
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Case Action
 * Delete a case action.
 * @param data The data for the request.
 * @param data.caseActionId
 * @param data.workspaceId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const casesDeleteCaseAction = (data: CasesDeleteCaseActionData): CancelablePromise<CasesDeleteCaseActionResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/case-actions/{case_action_id}',
    path: {
        case_action_id: data.caseActionId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Case Contexts
 * List all case contexts.
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns tracecat__db__schemas__CaseContext Successful Response
 * @throws ApiError
 */
export const casesListCaseContexts = (data: CasesListCaseContextsData): CancelablePromise<CasesListCaseContextsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/case-contexts',
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Case Context
 * Create a new case context.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns tracecat__db__schemas__CaseContext Successful Response
 * @throws ApiError
 */
export const casesCreateCaseContext = (data: CasesCreateCaseContextData): CancelablePromise<CasesCreateCaseContextResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/case-contexts',
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Case Context
 * Delete a case context.
 * @param data The data for the request.
 * @param data.caseContextId
 * @param data.workspaceId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const casesDeleteCaseContext = (data: CasesDeleteCaseContextData): CancelablePromise<CasesDeleteCaseContextResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/case-contexts/{case_context_id}',
    path: {
        case_context_id: data.caseContextId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Secrets
 * List user secrets.
 * @param data The data for the request.
 * @param data.workspaceId
 * @returns SecretResponse Successful Response
 * @throws ApiError
 */
export const secretsListSecrets = (data: SecretsListSecretsData): CancelablePromise<SecretsListSecretsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/secrets',
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Secret
 * Create a secret.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const secretsCreateSecret = (data: SecretsCreateSecretData): CancelablePromise<SecretsCreateSecretResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/secrets',
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Secret
 * Get a secret.
 * @param data The data for the request.
 * @param data.secretName
 * @returns Secret Successful Response
 * @throws ApiError
 */
export const secretsGetSecret = (data: SecretsGetSecretData): CancelablePromise<SecretsGetSecretResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/secrets/{secret_name}',
    path: {
        secret_name: data.secretName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Secret By Id
 * Update a secret by ID.
 * @param data The data for the request.
 * @param data.secretId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const secretsUpdateSecretById = (data: SecretsUpdateSecretByIdData): CancelablePromise<SecretsUpdateSecretByIdResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/secrets/{secret_id}',
    path: {
        secret_id: data.secretId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Secret By Id
 * Delete a secret by ID.
 * @param data The data for the request.
 * @param data.secretId
 * @param data.workspaceId
 * @returns void Successful Response
 * @throws ApiError
 */
export const secretsDeleteSecretById = (data: SecretsDeleteSecretByIdData): CancelablePromise<SecretsDeleteSecretByIdResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/secrets/{secret_id}',
    path: {
        secret_id: data.secretId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Secrets
 * **[WORK IN PROGRESS]**   Get a secret by ID.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns Secret Successful Response
 * @throws ApiError
 */
export const secretsSearchSecrets = (data: SecretsSearchSecretsData): CancelablePromise<SecretsSearchSecretsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/secrets/search',
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Schedules
 * List all schedules for a workflow.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.workflowId
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesListSchedules = (data: SchedulesListSchedulesData): CancelablePromise<SchedulesListSchedulesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/schedules',
    query: {
        workflow_id: data.workflowId,
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Schedule
 * Create a schedule for a workflow.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesCreateSchedule = (data: SchedulesCreateScheduleData): CancelablePromise<SchedulesCreateScheduleResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/schedules',
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Schedule
 * Get a schedule from a workflow.
 * @param data The data for the request.
 * @param data.scheduleId
 * @param data.workspaceId
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesGetSchedule = (data: SchedulesGetScheduleData): CancelablePromise<SchedulesGetScheduleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/schedules/{schedule_id}',
    path: {
        schedule_id: data.scheduleId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Schedule
 * Update a schedule from a workflow. You cannot update the Workflow Definition, but you can update other fields.
 * @param data The data for the request.
 * @param data.scheduleId
 * @param data.workspaceId
 * @param data.requestBody
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesUpdateSchedule = (data: SchedulesUpdateScheduleData): CancelablePromise<SchedulesUpdateScheduleResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/schedules/{schedule_id}',
    path: {
        schedule_id: data.scheduleId
    },
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Schedule
 * Delete a schedule from a workflow.
 * @param data The data for the request.
 * @param data.scheduleId
 * @param data.workspaceId
 * @returns void Successful Response
 * @throws ApiError
 */
export const schedulesDeleteSchedule = (data: SchedulesDeleteScheduleData): CancelablePromise<SchedulesDeleteScheduleResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/schedules/{schedule_id}',
    path: {
        schedule_id: data.scheduleId
    },
    query: {
        workspace_id: data.workspaceId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Schedules
 * **[WORK IN PROGRESS]** Search for schedules.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.requestBody
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesSearchSchedules = (data: SchedulesSearchSchedulesData): CancelablePromise<SchedulesSearchSchedulesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/schedules/search',
    query: {
        workspace_id: data.workspaceId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Validate Workflow
 * Validate a workflow.
 *
 * This deploys the workflow and updates its version. If a YAML file is provided, it will override the workflow in the database.
 * @param data The data for the request.
 * @param data.workspaceId
 * @param data.formData
 * @returns UDFArgsValidationResponse Successful Response
 * @throws ApiError
 */
export const validationValidateWorkflow = (data: ValidationValidateWorkflowData): CancelablePromise<ValidationValidateWorkflowResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/validate-workflow',
    query: {
        workspace_id: data.workspaceId
    },
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search User
 * Create new user.
 * @param data The data for the request.
 * @param data.email
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersSearchUser = (data: UsersSearchUserData = {}): CancelablePromise<UsersSearchUserResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/search',
    query: {
        email: data.email
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Users:Current User
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersUsersCurrentUser = (): CancelablePromise<UsersUsersCurrentUserResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/me',
    errors: {
        401: 'Missing token or inactive user.'
    }
}); };

/**
 * Users:Patch Current User
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersUsersPatchCurrentUser = (data: UsersUsersPatchCurrentUserData): CancelablePromise<UsersUsersPatchCurrentUserResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/users/me',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Missing token or inactive user.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:User
 * @param data The data for the request.
 * @param data.id
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersUsersUser = (data: UsersUsersUserData): CancelablePromise<UsersUsersUserResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users/{id}',
    path: {
        id: data.id
    },
    errors: {
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:Patch User
 * @param data The data for the request.
 * @param data.id
 * @param data.requestBody
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const usersUsersPatchUser = (data: UsersUsersPatchUserData): CancelablePromise<UsersUsersPatchUserResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/users/{id}',
    path: {
        id: data.id
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };

/**
 * Users:Delete User
 * @param data The data for the request.
 * @param data.id
 * @returns void Successful Response
 * @throws ApiError
 */
export const usersUsersDeleteUser = (data: UsersUsersDeleteUserData): CancelablePromise<UsersUsersDeleteUserResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/users/{id}',
    path: {
        id: data.id
    },
    errors: {
        401: 'Missing token or inactive user.',
        403: 'Not a superuser.',
        404: 'The user does not exist.',
        422: 'Validation Error'
    }
}); };

/**
 * Auth:Database.Login
 * @param data The data for the request.
 * @param data.formData
 * @returns unknown Successful Response
 * @returns void No Content
 * @throws ApiError
 */
export const authAuthDatabaseLogin = (data: AuthAuthDatabaseLoginData): CancelablePromise<AuthAuthDatabaseLoginResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/login',
    formData: data.formData,
    mediaType: 'application/x-www-form-urlencoded',
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Auth:Database.Logout
 * @returns unknown Successful Response
 * @returns void No Content
 * @throws ApiError
 */
export const authAuthDatabaseLogout = (): CancelablePromise<AuthAuthDatabaseLogoutResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/logout',
    errors: {
        401: 'Missing token or inactive user.'
    }
}); };

/**
 * Register:Register
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const authRegisterRegister = (data: AuthRegisterRegisterData): CancelablePromise<AuthRegisterRegisterResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/register',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Reset:Forgot Password
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const authResetForgotPassword = (data: AuthResetForgotPasswordData): CancelablePromise<AuthResetForgotPasswordResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/forgot-password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Reset:Reset Password
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const authResetResetPassword = (data: AuthResetResetPasswordData): CancelablePromise<AuthResetResetPasswordResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/reset-password',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Verify:Request-Token
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const authVerifyRequestToken = (data: AuthVerifyRequestTokenData): CancelablePromise<AuthVerifyRequestTokenResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/request-verify-token',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Verify:Verify
 * @param data The data for the request.
 * @param data.requestBody
 * @returns UserRead Successful Response
 * @throws ApiError
 */
export const authVerifyVerify = (data: AuthVerifyVerifyData): CancelablePromise<AuthVerifyVerifyResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/auth/verify',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Oauth:Google.Database.Authorize
 * @param data The data for the request.
 * @param data.scopes
 * @returns OAuth2AuthorizeResponse Successful Response
 * @throws ApiError
 */
export const authOauthGoogleDatabaseAuthorize = (data: AuthOauthGoogleDatabaseAuthorizeData = {}): CancelablePromise<AuthOauthGoogleDatabaseAuthorizeResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/auth/oauth/authorize',
    query: {
        scopes: data.scopes
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Oauth:Google.Database.Callback
 * The response varies based on the authentication backend used.
 * @param data The data for the request.
 * @param data.code
 * @param data.codeVerifier
 * @param data.state
 * @param data.error
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const authOauthGoogleDatabaseCallback = (data: AuthOauthGoogleDatabaseCallbackData = {}): CancelablePromise<AuthOauthGoogleDatabaseCallbackResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/auth/oauth/callback',
    query: {
        code: data.code,
        code_verifier: data.codeVerifier,
        state: data.state,
        error: data.error
    },
    errors: {
        400: 'Bad Request',
        422: 'Validation Error'
    }
}); };

/**
 * Check Health
 * @returns string Successful Response
 * @throws ApiError
 */
export const publicCheckHealth = (): CancelablePromise<PublicCheckHealthResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/health'
}); };
