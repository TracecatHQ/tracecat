// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { CheckHealthResponse, PublicIncomingWebhookData, PublicIncomingWebhookResponse, PublicWebhookCallbackData, PublicWebhookCallbackResponse, WorkflowsListWorkflowsData, WorkflowsListWorkflowsResponse, WorkflowsCreateWorkflowData, WorkflowsCreateWorkflowResponse, WorkflowsGetWorkflowData, WorkflowsGetWorkflowResponse, WorkflowsUpdateWorkflowData, WorkflowsUpdateWorkflowResponse, WorkflowsDeleteWorkflowData, WorkflowsDeleteWorkflowResponse, WorkflowsCopyWorkflowData, WorkflowsCopyWorkflowResponse, WorkflowsCommitWorkflowData, WorkflowsCommitWorkflowResponse, WorkflowsGetWorkflowDefinitionData, WorkflowsGetWorkflowDefinitionResponse, WorkflowsCreateWorkflowDefinitionData, WorkflowsCreateWorkflowDefinitionResponse, WorkflowExecutionsListWorkflowExecutionsData, WorkflowExecutionsListWorkflowExecutionsResponse, WorkflowExecutionsCreateWorkflowExecutionData, WorkflowExecutionsCreateWorkflowExecutionResponse, WorkflowExecutionsGetWorkflowExecutionData, WorkflowExecutionsGetWorkflowExecutionResponse, WorkflowExecutionsListWorkflowExecutionEventHistoryData, WorkflowExecutionsListWorkflowExecutionEventHistoryResponse, TriggersCreateWebhookData, TriggersCreateWebhookResponse, TriggersGetWebhookData, TriggersGetWebhookResponse, TriggersUpdateWebhookData, TriggersUpdateWebhookResponse, SchedulesListSchedulesData, SchedulesListSchedulesResponse, SchedulesCreateScheduleData, SchedulesCreateScheduleResponse, SchedulesGetScheduleData, SchedulesGetScheduleResponse, SchedulesUpdateScheduleData, SchedulesUpdateScheduleResponse, SchedulesDeleteScheduleData, SchedulesDeleteScheduleResponse, SchedulesSearchSchedulesData, SchedulesSearchSchedulesResponse, ActionsListActionsData, ActionsListActionsResponse, ActionsCreateActionData, ActionsCreateActionResponse, ActionsGetActionData, ActionsGetActionResponse, ActionsUpdateActionData, ActionsUpdateActionResponse, ActionsDeleteActionData, ActionsDeleteActionResponse, CasesCreateCaseData, CasesCreateCaseResponse, CasesListCasesData, CasesListCasesResponse, CasesGetCaseData, CasesGetCaseResponse, CasesUpdateCaseData, CasesUpdateCaseResponse, CasesCreateCaseEventData, CasesCreateCaseEventResponse, CasesListCaseEventsData, CasesListCaseEventsResponse, CasesGetCaseEventData, CasesGetCaseEventResponse, CasesListCaseActionsResponse, CasesCreateCaseActionData, CasesCreateCaseActionResponse, CasesDeleteCaseActionData, CasesDeleteCaseActionResponse, CasesListCaseContextsResponse, CasesCreateCaseContextData, CasesCreateCaseContextResponse, CasesDeleteCaseContextData, CasesDeleteCaseContextResponse, UsersGetUserResponse, UsersUpdateUserData, UsersUpdateUserResponse, UsersDeleteUserResponse, SecretsListSecretsResponse, SecretsCreateSecretData, SecretsCreateSecretResponse, SecretsGetSecretData, SecretsGetSecretResponse, SecretsUpdateSecretData, SecretsUpdateSecretResponse, SecretsDeleteSecretData, SecretsDeleteSecretResponse, SecretsSearchSecretsData, SecretsSearchSecretsResponse, UdfsListUdfsData, UdfsListUdfsResponse, UdfsGetUdfData, UdfsGetUdfResponse, UdfsCreateUdfData, UdfsCreateUdfResponse, UdfsValidateUdfArgsData, UdfsValidateUdfArgsResponse, ValidateWorkflowData, ValidateWorkflowResponse } from './types.gen';

/**
 * Check Health
 * @returns string Successful Response
 * @throws ApiError
 */
export const checkHealth = (): CancelablePromise<CheckHealthResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/health'
}); };

/**
 * Incoming Webhook
 * Webhook endpoint to trigger a workflow.
 *
 * This is an external facing endpoint is used to trigger a workflow by sending a webhook request.
 * The workflow is identified by the `path` parameter, which is equivalent to the workflow id.
 * @param data The data for the request.
 * @param data.path
 * @param data.secret
 * @param data.validateMethod
 * @param data.xTracecatEnableRuntimeTests
 * @param data.requestBody
 * @returns CreateWorkflowExecutionResponse Successful Response
 * @throws ApiError
 */
export const publicIncomingWebhook = (data: PublicIncomingWebhookData): CancelablePromise<PublicIncomingWebhookResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/webhooks/{path}/{secret}',
    path: {
        path: data.path,
        secret: data.secret
    },
    headers: {
        'x-tracecat-enable-runtime-tests': data.xTracecatEnableRuntimeTests
    },
    query: {
        validate_method: data.validateMethod
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Webhook Callback
 * Receive a callback from an external service.
 *
 * This can be used to trigger a workflow from an external service, or perform some other actions.
 * @param data The data for the request.
 * @param data.service
 * @returns string Successful Response
 * @throws ApiError
 */
export const publicWebhookCallback = (data: PublicWebhookCallbackData): CancelablePromise<PublicWebhookCallbackResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/callback/{service}',
    path: {
        service: data.service
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Workflows
 * List workflows.
 *
 * If `library` is True, it will list workflows from the library. If `library` is False, it will list workflows owned by the user.
 * @param data The data for the request.
 * @param data.library
 * @returns WorkflowMetadataResponse Successful Response
 * @throws ApiError
 */
export const workflowsListWorkflows = (data: WorkflowsListWorkflowsData = {}): CancelablePromise<WorkflowsListWorkflowsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows',
    query: {
        library: data.library
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Workflow
 * Create new Workflow.
 *
 * Optionally, you can provide a YAML file to create a workflow.
 * You can also provide a title and description to create a blank workflow.
 * @param data The data for the request.
 * @param data.formData
 * @returns WorkflowMetadataResponse Successful Response
 * @throws ApiError
 */
export const workflowsCreateWorkflow = (data: WorkflowsCreateWorkflowData = {}): CancelablePromise<WorkflowsCreateWorkflowResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows',
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workflow
 * Return Workflow as title, description, list of Action JSONs, adjacency list of Action IDs.
 * @param data The data for the request.
 * @param data.workflowId
 * @returns WorkflowResponse Successful Response
 * @throws ApiError
 */
export const workflowsGetWorkflow = (data: WorkflowsGetWorkflowData): CancelablePromise<WorkflowsGetWorkflowResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}',
    path: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Workflow
 * Update a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const workflowsUpdateWorkflow = (data: WorkflowsUpdateWorkflowData): CancelablePromise<WorkflowsUpdateWorkflowResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/workflows/{workflow_id}',
    path: {
        workflow_id: data.workflowId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Workflow
 * Delete a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @returns void Successful Response
 * @throws ApiError
 */
export const workflowsDeleteWorkflow = (data: WorkflowsDeleteWorkflowData): CancelablePromise<WorkflowsDeleteWorkflowResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/workflows/{workflow_id}',
    path: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Copy Workflow
 * Copy a workflow. Not intended for users.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const workflowsCopyWorkflow = (data: WorkflowsCopyWorkflowData): CancelablePromise<WorkflowsCopyWorkflowResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/copy',
    path: {
        workflow_id: data.workflowId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Commit Workflow
 * Commit a workflow.
 *
 * This deploys the workflow and updates its version. If a YAML file is provided, it will override the workflow in the database.
 * @param data The data for the request.
 * @param data.workflowId
 * @returns CommitWorkflowResponse Successful Response
 * @throws ApiError
 */
export const workflowsCommitWorkflow = (data: WorkflowsCommitWorkflowData): CancelablePromise<WorkflowsCommitWorkflowResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/commit',
    path: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workflow Definition
 * Get the latest version of a workflow definition.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.version
 * @returns WorkflowDefinition Successful Response
 * @throws ApiError
 */
export const workflowsGetWorkflowDefinition = (data: WorkflowsGetWorkflowDefinitionData): CancelablePromise<WorkflowsGetWorkflowDefinitionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/definition',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        version: data.version
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Workflow Definition
 * Get the latest version of a workflow definition.
 * @param data The data for the request.
 * @param data.workflowId
 * @returns WorkflowDefinition Successful Response
 * @throws ApiError
 */
export const workflowsCreateWorkflowDefinition = (data: WorkflowsCreateWorkflowDefinitionData): CancelablePromise<WorkflowsCreateWorkflowDefinitionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/definition',
    path: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Workflow Executions
 * List all workflow executions.
 * @param data The data for the request.
 * @param data.workflowId
 * @returns WorkflowExecutionResponse Successful Response
 * @throws ApiError
 */
export const workflowExecutionsListWorkflowExecutions = (data: WorkflowExecutionsListWorkflowExecutionsData = {}): CancelablePromise<WorkflowExecutionsListWorkflowExecutionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflow-executions',
    query: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Workflow Execution
 * Create and schedule a workflow execution.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CreateWorkflowExecutionResponse Successful Response
 * @throws ApiError
 */
export const workflowExecutionsCreateWorkflowExecution = (data: WorkflowExecutionsCreateWorkflowExecutionData): CancelablePromise<WorkflowExecutionsCreateWorkflowExecutionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflow-executions',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Workflow Execution
 * Get a workflow execution.
 * @param data The data for the request.
 * @param data.executionId
 * @returns WorkflowExecutionResponse Successful Response
 * @throws ApiError
 */
export const workflowExecutionsGetWorkflowExecution = (data: WorkflowExecutionsGetWorkflowExecutionData): CancelablePromise<WorkflowExecutionsGetWorkflowExecutionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflow-executions/{execution_id}',
    path: {
        execution_id: data.executionId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Workflow Execution Event History
 * Get a workflow execution.
 * @param data The data for the request.
 * @param data.executionId
 * @returns EventHistoryResponse Successful Response
 * @throws ApiError
 */
export const workflowExecutionsListWorkflowExecutionEventHistory = (data: WorkflowExecutionsListWorkflowExecutionEventHistoryData): CancelablePromise<WorkflowExecutionsListWorkflowExecutionEventHistoryResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflow-executions/{execution_id}/history',
    path: {
        execution_id: data.executionId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Webhook
 * Create a webhook for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const triggersCreateWebhook = (data: TriggersCreateWebhookData): CancelablePromise<TriggersCreateWebhookResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/webhook',
    path: {
        workflow_id: data.workflowId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Webhook
 * Get the webhook from a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @returns WebhookResponse Successful Response
 * @throws ApiError
 */
export const triggersGetWebhook = (data: TriggersGetWebhookData): CancelablePromise<TriggersGetWebhookResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/webhook',
    path: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Webhook
 * Update the webhook for a workflow. We currently supprt only one webhook per workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const triggersUpdateWebhook = (data: TriggersUpdateWebhookData): CancelablePromise<TriggersUpdateWebhookResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/workflows/{workflow_id}/webhook',
    path: {
        workflow_id: data.workflowId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Schedules
 * List all schedules for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesListSchedules = (data: SchedulesListSchedulesData = {}): CancelablePromise<SchedulesListSchedulesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/schedules',
    query: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Schedule
 * Create a schedule for a workflow.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesCreateSchedule = (data: SchedulesCreateScheduleData): CancelablePromise<SchedulesCreateScheduleResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/schedules',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Schedule
 * Get a schedule from a workflow.
 * @param data The data for the request.
 * @param data.scheduleId
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesGetSchedule = (data: SchedulesGetScheduleData): CancelablePromise<SchedulesGetScheduleResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/schedules/{schedule_id}',
    path: {
        schedule_id: data.scheduleId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Schedule
 * Update a schedule from a workflow. You cannot update the Workflow Definition, but you can update other fields.
 * @param data The data for the request.
 * @param data.scheduleId
 * @param data.requestBody
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesUpdateSchedule = (data: SchedulesUpdateScheduleData): CancelablePromise<SchedulesUpdateScheduleResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/schedules/{schedule_id}',
    path: {
        schedule_id: data.scheduleId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Schedule
 * Delete a schedule from a workflow.
 * @param data The data for the request.
 * @param data.scheduleId
 * @returns void Successful Response
 * @throws ApiError
 */
export const schedulesDeleteSchedule = (data: SchedulesDeleteScheduleData): CancelablePromise<SchedulesDeleteScheduleResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/schedules/{schedule_id}',
    path: {
        schedule_id: data.scheduleId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Schedules
 * **[WORK IN PROGRESS]** Search for schedules.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Schedule Successful Response
 * @throws ApiError
 */
export const schedulesSearchSchedules = (data: SchedulesSearchSchedulesData): CancelablePromise<SchedulesSearchSchedulesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/schedules/search',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Actions
 * List all actions for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @returns ActionMetadataResponse Successful Response
 * @throws ApiError
 */
export const actionsListActions = (data: ActionsListActionsData): CancelablePromise<ActionsListActionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/actions',
    query: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Action
 * Create a new action for a workflow.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns ActionMetadataResponse Successful Response
 * @throws ApiError
 */
export const actionsCreateAction = (data: ActionsCreateActionData): CancelablePromise<ActionsCreateActionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/actions',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Action
 * Get an action.
 * @param data The data for the request.
 * @param data.actionId
 * @param data.workflowId
 * @returns ActionResponse Successful Response
 * @throws ApiError
 */
export const actionsGetAction = (data: ActionsGetActionData): CancelablePromise<ActionsGetActionResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/actions/{action_id}',
    path: {
        action_id: data.actionId
    },
    query: {
        workflow_id: data.workflowId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Action
 * Update an action.
 * @param data The data for the request.
 * @param data.actionId
 * @param data.requestBody
 * @returns ActionResponse Successful Response
 * @throws ApiError
 */
export const actionsUpdateAction = (data: ActionsUpdateActionData): CancelablePromise<ActionsUpdateActionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/actions/{action_id}',
    path: {
        action_id: data.actionId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Action
 * Delete an action.
 * @param data The data for the request.
 * @param data.actionId
 * @returns void Successful Response
 * @throws ApiError
 */
export const actionsDeleteAction = (data: ActionsDeleteActionData): CancelablePromise<ActionsDeleteActionResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/actions/{action_id}',
    path: {
        action_id: data.actionId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Case
 * Create a new case for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.requestBody
 * @returns CaseResponse Successful Response
 * @throws ApiError
 */
export const casesCreateCase = (data: CasesCreateCaseData): CancelablePromise<CasesCreateCaseResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/cases',
    path: {
        workflow_id: data.workflowId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Cases
 * List all cases for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.limit
 * @returns CaseResponse Successful Response
 * @throws ApiError
 */
export const casesListCases = (data: CasesListCasesData): CancelablePromise<CasesListCasesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/cases',
    path: {
        workflow_id: data.workflowId
    },
    query: {
        limit: data.limit
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Case
 * Get a specific case for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @returns CaseResponse Successful Response
 * @throws ApiError
 */
export const casesGetCase = (data: CasesGetCaseData): CancelablePromise<CasesGetCaseResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/cases/{case_id}',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Case
 * Update a specific case for a workflow.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @param data.requestBody
 * @returns CaseResponse Successful Response
 * @throws ApiError
 */
export const casesUpdateCase = (data: CasesUpdateCaseData): CancelablePromise<CasesUpdateCaseResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/cases/{case_id}',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Case Event
 * Create a new Case Event.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const casesCreateCaseEvent = (data: CasesCreateCaseEventData): CancelablePromise<CasesCreateCaseEventResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/workflows/{workflow_id}/cases/{case_id}/events',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Case Events
 * List all Case Events.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @returns CaseEvent Successful Response
 * @throws ApiError
 */
export const casesListCaseEvents = (data: CasesListCaseEventsData): CancelablePromise<CasesListCaseEventsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/cases/{case_id}/events',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Case Event
 * Get a specific case event.
 * @param data The data for the request.
 * @param data.workflowId
 * @param data.caseId
 * @param data.eventId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const casesGetCaseEvent = (data: CasesGetCaseEventData): CancelablePromise<CasesGetCaseEventResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/workflows/{workflow_id}/cases/{case_id}/events/{event_id}',
    path: {
        workflow_id: data.workflowId,
        case_id: data.caseId,
        event_id: data.eventId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Case Actions
 * List all case actions.
 * @returns CaseAction Successful Response
 * @throws ApiError
 */
export const casesListCaseActions = (): CancelablePromise<CasesListCaseActionsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/case-actions'
}); };

/**
 * Create Case Action
 * Create a new case action.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns CaseAction Successful Response
 * @throws ApiError
 */
export const casesCreateCaseAction = (data: CasesCreateCaseActionData): CancelablePromise<CasesCreateCaseActionResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/case-actions',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Case Action
 * Delete a case action.
 * @param data The data for the request.
 * @param data.caseActionId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const casesDeleteCaseAction = (data: CasesDeleteCaseActionData): CancelablePromise<CasesDeleteCaseActionResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/case-actions/{case_action_id}',
    path: {
        case_action_id: data.caseActionId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Case Contexts
 * List all case contexts.
 * @returns tracecat__db__schemas__CaseContext Successful Response
 * @throws ApiError
 */
export const casesListCaseContexts = (): CancelablePromise<CasesListCaseContextsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/case-contexts'
}); };

/**
 * Create Case Context
 * Create a new case context.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns tracecat__db__schemas__CaseContext Successful Response
 * @throws ApiError
 */
export const casesCreateCaseContext = (data: CasesCreateCaseContextData): CancelablePromise<CasesCreateCaseContextResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/case-contexts',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Case Context
 * Delete a case context.
 * @param data The data for the request.
 * @param data.caseContextId
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const casesDeleteCaseContext = (data: CasesDeleteCaseContextData): CancelablePromise<CasesDeleteCaseContextResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/case-contexts/{case_context_id}',
    path: {
        case_context_id: data.caseContextId
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get User
 * Get a user.
 * @returns User Successful Response
 * @throws ApiError
 */
export const usersGetUser = (): CancelablePromise<UsersGetUserResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/users'
}); };

/**
 * Update User
 * Update a user.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns void Successful Response
 * @throws ApiError
 */
export const usersUpdateUser = (data: UsersUpdateUserData): CancelablePromise<UsersUpdateUserResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/users',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete User
 * Delete a user.
 * @returns void Successful Response
 * @throws ApiError
 */
export const usersDeleteUser = (): CancelablePromise<UsersDeleteUserResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/users'
}); };

/**
 * List Secrets
 * List user secrets.
 * @returns SecretResponse Successful Response
 * @throws ApiError
 */
export const secretsListSecrets = (): CancelablePromise<SecretsListSecretsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/secrets'
}); };

/**
 * Create Secret
 * Create a secret.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns unknown Successful Response
 * @throws ApiError
 */
export const secretsCreateSecret = (data: SecretsCreateSecretData): CancelablePromise<SecretsCreateSecretResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/secrets',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Secret
 * Get a secret.
 * @param data The data for the request.
 * @param data.secretName
 * @returns Secret Successful Response
 * @throws ApiError
 */
export const secretsGetSecret = (data: SecretsGetSecretData): CancelablePromise<SecretsGetSecretResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/secrets/{secret_name}',
    path: {
        secret_name: data.secretName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Update Secret
 * Update a secret
 * @param data The data for the request.
 * @param data.secretName
 * @param data.requestBody
 * @returns Secret Successful Response
 * @throws ApiError
 */
export const secretsUpdateSecret = (data: SecretsUpdateSecretData): CancelablePromise<SecretsUpdateSecretResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/secrets/{secret_name}',
    path: {
        secret_name: data.secretName
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Delete Secret
 * Delete a secret.
 * @param data The data for the request.
 * @param data.secretName
 * @returns void Successful Response
 * @throws ApiError
 */
export const secretsDeleteSecret = (data: SecretsDeleteSecretData): CancelablePromise<SecretsDeleteSecretResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/secrets/{secret_name}',
    path: {
        secret_name: data.secretName
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Search Secrets
 * **[WORK IN PROGRESS]**   Get a secret by ID.
 * @param data The data for the request.
 * @param data.requestBody
 * @returns Secret Successful Response
 * @throws ApiError
 */
export const secretsSearchSecrets = (data: SecretsSearchSecretsData): CancelablePromise<SecretsSearchSecretsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/secrets/search',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * List Udfs
 * List all user-defined function specifications for a user.
 * @param data The data for the request.
 * @param data.limit
 * @param data.ns
 * @returns UDFSpec Successful Response
 * @throws ApiError
 */
export const udfsListUdfs = (data: UdfsListUdfsData = {}): CancelablePromise<UdfsListUdfsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/udfs',
    query: {
        limit: data.limit,
        ns: data.ns
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Get Udf
 * Get a user-defined function specification.
 * @param data The data for the request.
 * @param data.udfKey
 * @param data.namespace
 * @returns UDFSpec Successful Response
 * @throws ApiError
 */
export const udfsGetUdf = (data: UdfsGetUdfData): CancelablePromise<UdfsGetUdfResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/udfs/{udf_key}',
    path: {
        udf_key: data.udfKey
    },
    query: {
        namespace: data.namespace
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Create Udf
 * Create a user-defined function specification.
 * @param data The data for the request.
 * @param data.udfKey
 * @returns UDFSpec Successful Response
 * @throws ApiError
 */
export const udfsCreateUdf = (data: UdfsCreateUdfData): CancelablePromise<UdfsCreateUdfResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/udfs/{udf_key}',
    path: {
        udf_key: data.udfKey
    },
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Validate Udf Args
 * Validate user-defined function's arguments.
 * @param data The data for the request.
 * @param data.udfKey
 * @param data.requestBody
 * @returns UDFArgsValidationResponse Successful Response
 * @throws ApiError
 */
export const udfsValidateUdfArgs = (data: UdfsValidateUdfArgsData): CancelablePromise<UdfsValidateUdfArgsResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/udfs/{udf_key}/validate',
    path: {
        udf_key: data.udfKey
    },
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
        422: 'Validation Error'
    }
}); };

/**
 * Validate Workflow
 * Validate a workflow.
 *
 * This deploys the workflow and updates its version. If a YAML file is provided, it will override the workflow in the database.
 * @param data The data for the request.
 * @param data.formData
 * @returns UDFArgsValidationResponse Successful Response
 * @throws ApiError
 */
export const validateWorkflow = (data: ValidateWorkflowData): CancelablePromise<ValidateWorkflowResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/validate-workflow',
    formData: data.formData,
    mediaType: 'multipart/form-data',
    errors: {
        422: 'Validation Error'
    }
}); };
