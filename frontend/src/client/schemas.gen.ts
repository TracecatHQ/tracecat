// This file is auto-generated by @hey-api/openapi-ts

export const $AccessLevel = {
  type: "integer",
  enum: [0, 999],
  title: "AccessLevel",
  description: "Access control levels for roles.",
} as const

export const $ActionControlFlow = {
  properties: {
    run_if: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
        },
        {
          type: "null",
        },
      ],
      title: "Run If",
    },
    for_each: {
      anyOf: [
        {
          anyOf: [
            {
              type: "string",
            },
            {
              items: {
                type: "string",
              },
              type: "array",
            },
          ],
          maxLength: 1000,
        },
        {
          type: "null",
        },
      ],
      title: "For Each",
    },
    join_strategy: {
      $ref: "#/components/schemas/JoinStrategy",
      default: "all",
    },
    retry_policy: {
      $ref: "#/components/schemas/ActionRetryPolicy",
    },
    start_delay: {
      type: "number",
      title: "Start Delay",
      description:
        "Delay before starting the action in seconds. If `wait_until` is also provided, the `wait_until` timer will take precedence.",
      default: 0,
    },
    wait_until: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Wait Until",
      description:
        "Wait until a specific date and time before starting. Overrides `start_delay` if both are provided.",
    },
  },
  type: "object",
  title: "ActionControlFlow",
} as const

export const $ActionCreate = {
  properties: {
    workflow_id: {
      anyOf: [
        {
          type: "string",
          pattern: "wf_[0-9a-zA-Z]+",
        },
        {
          type: "string",
          pattern: "wf-[0-9a-f]{32}",
        },
      ],
      title: "Workflow Id",
    },
    type: {
      type: "string",
      title: "Type",
    },
    title: {
      type: "string",
      maxLength: 100,
      minLength: 1,
      title: "Title",
    },
  },
  type: "object",
  required: ["workflow_id", "type", "title"],
  title: "ActionCreate",
} as const

export const $ActionRead = {
  properties: {
    id: {
      type: "string",
      pattern: "act-[0-9a-f]{32}",
      title: "Id",
    },
    type: {
      type: "string",
      title: "Type",
    },
    title: {
      type: "string",
      title: "Title",
    },
    description: {
      type: "string",
      title: "Description",
    },
    status: {
      type: "string",
      title: "Status",
    },
    inputs: {
      type: "string",
      title: "Inputs",
    },
    control_flow: {
      $ref: "#/components/schemas/ActionControlFlow",
    },
    is_interactive: {
      type: "boolean",
      title: "Is Interactive",
    },
    interaction: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/ResponseInteraction",
            },
            {
              $ref: "#/components/schemas/ApprovalInteraction",
            },
          ],
          description: "An interaction configuration",
          discriminator: {
            propertyName: "type",
            mapping: {
              approval: "#/components/schemas/ApprovalInteraction",
              response: "#/components/schemas/ResponseInteraction",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Interaction",
    },
  },
  type: "object",
  required: [
    "id",
    "type",
    "title",
    "description",
    "status",
    "inputs",
    "is_interactive",
  ],
  title: "ActionRead",
} as const

export const $ActionReadMinimal = {
  properties: {
    id: {
      type: "string",
      pattern: "act-[0-9a-f]{32}",
      title: "Id",
    },
    workflow_id: {
      type: "string",
      pattern: "wf_[0-9a-zA-Z]+",
      title: "Workflow Id",
    },
    type: {
      type: "string",
      title: "Type",
    },
    title: {
      type: "string",
      title: "Title",
    },
    description: {
      type: "string",
      title: "Description",
    },
    status: {
      type: "string",
      title: "Status",
    },
    is_interactive: {
      type: "boolean",
      title: "Is Interactive",
    },
  },
  type: "object",
  required: [
    "id",
    "workflow_id",
    "type",
    "title",
    "description",
    "status",
    "is_interactive",
  ],
  title: "ActionReadMinimal",
} as const

export const $ActionRetryPolicy = {
  properties: {
    max_attempts: {
      type: "integer",
      title: "Max Attempts",
      description:
        "Total number of execution attempts. 0 means unlimited, 1 means no retries.",
      default: 1,
    },
    timeout: {
      type: "integer",
      title: "Timeout",
      description: "Timeout for the action in seconds.",
      default: 300,
    },
    retry_until: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Retry Until",
      description: "Retry until a specific condition is met.",
    },
  },
  type: "object",
  title: "ActionRetryPolicy",
} as const

export const $ActionStatement = {
  properties: {
    ref: {
      type: "string",
      pattern: "^[a-z0-9_]+$",
      title: "Ref",
      description: "Unique reference for the task",
    },
    description: {
      type: "string",
      title: "Description",
      default: "",
    },
    action: {
      type: "string",
      pattern: "^[a-z0-9_.]+$",
      title: "Action",
      description: "Action type. Equivalent to the UDF key.",
    },
    args: {
      type: "object",
      title: "Args",
      description: "Arguments for the action",
    },
    depends_on: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Depends On",
      description: "Task dependencies",
    },
    interaction: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/ResponseInteraction",
            },
            {
              $ref: "#/components/schemas/ApprovalInteraction",
            },
          ],
          description: "An interaction configuration",
          discriminator: {
            propertyName: "type",
            mapping: {
              approval: "#/components/schemas/ApprovalInteraction",
              response: "#/components/schemas/ResponseInteraction",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Interaction",
      description: "Whether the action is interactive.",
    },
    run_if: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Run If",
      description: "Condition to run the task",
    },
    for_each: {
      anyOf: [
        {
          type: "string",
        },
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "For Each",
      description:
        "Iterate over a list of items and run the task for each item.",
    },
    retry_policy: {
      $ref: "#/components/schemas/ActionRetryPolicy",
      description: "Retry policy for the action.",
    },
    start_delay: {
      type: "number",
      title: "Start Delay",
      description:
        "Delay before starting the action in seconds. If `wait_until` is also provided, the `wait_until` timer will take precedence.",
      default: 0,
    },
    wait_until: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Wait Until",
      description:
        "Wait until a specific date and time before starting. Overrides `start_delay` if both are provided.",
    },
    join_strategy: {
      $ref: "#/components/schemas/JoinStrategy",
      description:
        "The strategy to use when joining on this task. By default, all branches must complete successfully before the join task can complete.",
      default: "all",
    },
  },
  type: "object",
  required: ["ref", "action"],
  title: "ActionStatement",
} as const

export const $ActionStep = {
  properties: {
    ref: {
      type: "string",
      title: "Ref",
      description: "The reference of the step",
    },
    action: {
      type: "string",
      title: "Action",
    },
    args: {
      type: "object",
      title: "Args",
    },
  },
  type: "object",
  required: ["ref", "action", "args"],
  title: "ActionStep",
} as const

export const $ActionUpdate = {
  properties: {
    title: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Title",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    status: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Status",
    },
    inputs: {
      type: "string",
      maxLength: 300000,
      title: "Inputs",
      default: "",
    },
    control_flow: {
      anyOf: [
        {
          $ref: "#/components/schemas/ActionControlFlow",
        },
        {
          type: "null",
        },
      ],
      mode: "json",
    },
    is_interactive: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Interactive",
    },
    interaction: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/ResponseInteraction",
            },
            {
              $ref: "#/components/schemas/ApprovalInteraction",
            },
          ],
          description: "An interaction configuration",
          discriminator: {
            propertyName: "type",
            mapping: {
              approval: "#/components/schemas/ApprovalInteraction",
              response: "#/components/schemas/ResponseInteraction",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Interaction",
    },
  },
  type: "object",
  title: "ActionUpdate",
} as const

export const $AppSettingsRead = {
  properties: {
    app_registry_validation_enabled: {
      type: "boolean",
      title: "App Registry Validation Enabled",
    },
    app_executions_query_limit: {
      type: "integer",
      title: "App Executions Query Limit",
    },
    app_interactions_enabled: {
      type: "boolean",
      title: "App Interactions Enabled",
    },
  },
  type: "object",
  required: [
    "app_registry_validation_enabled",
    "app_executions_query_limit",
    "app_interactions_enabled",
  ],
  title: "AppSettingsRead",
  description: "Settings for the app.",
} as const

export const $AppSettingsUpdate = {
  properties: {
    app_registry_validation_enabled: {
      type: "boolean",
      title: "App Registry Validation Enabled",
      description: "Whether registry validation is enabled.",
      default: false,
    },
    app_executions_query_limit: {
      type: "integer",
      title: "App Executions Query Limit",
      description:
        "The maximum number of executions to return in a single query.",
      default: 100,
    },
    app_interactions_enabled: {
      type: "boolean",
      title: "App Interactions Enabled",
      description: "Whether app interactions are enabled.",
      default: false,
    },
  },
  type: "object",
  title: "AppSettingsUpdate",
  description: "Settings for OAuth authentication.",
} as const

export const $ApprovalInteraction = {
  properties: {
    type: {
      type: "string",
      const: "approval",
      title: "Type",
    },
    timeout: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Timeout",
      description: "The timeout for the interaction in seconds.",
    },
    required_approvers: {
      type: "integer",
      title: "Required Approvers",
      description:
        "Number of approvers required before the action can proceed.",
      default: 1,
    },
    approver_groups: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Approver Groups",
      description: "List of groups that are allowed to approve this action.",
    },
    message: {
      type: "string",
      title: "Message",
      description: "Custom message to display to approvers.",
      default: "",
    },
    approve_if: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Approve If",
      description: "Condition to approve the action.",
    },
  },
  type: "object",
  required: ["type"],
  title: "ApprovalInteraction",
  description: "Configuration for an approval interaction.",
} as const

export const $AuthSettingsRead = {
  properties: {
    auth_basic_enabled: {
      type: "boolean",
      title: "Auth Basic Enabled",
    },
    auth_require_email_verification: {
      type: "boolean",
      title: "Auth Require Email Verification",
    },
    auth_allowed_email_domains: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Auth Allowed Email Domains",
    },
    auth_min_password_length: {
      type: "integer",
      title: "Auth Min Password Length",
    },
    auth_session_expire_time_seconds: {
      type: "integer",
      title: "Auth Session Expire Time Seconds",
    },
  },
  type: "object",
  required: [
    "auth_basic_enabled",
    "auth_require_email_verification",
    "auth_allowed_email_domains",
    "auth_min_password_length",
    "auth_session_expire_time_seconds",
  ],
  title: "AuthSettingsRead",
} as const

export const $AuthSettingsUpdate = {
  properties: {
    auth_basic_enabled: {
      type: "boolean",
      title: "Auth Basic Enabled",
      description: "Whether basic auth is enabled.",
      default: true,
    },
    auth_require_email_verification: {
      type: "boolean",
      title: "Auth Require Email Verification",
      description: "Whether email verification is required for authentication.",
      default: false,
    },
    auth_allowed_email_domains: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Auth Allowed Email Domains",
      description:
        "Allowed email domains for authentication. If empty, all domains are allowed.",
    },
    auth_min_password_length: {
      type: "integer",
      title: "Auth Min Password Length",
      description: "Minimum password length for authentication.",
      default: 12,
    },
    auth_session_expire_time_seconds: {
      type: "integer",
      title: "Auth Session Expire Time Seconds",
      description: "Session expiration time in seconds.",
      default: 604800,
    },
  },
  type: "object",
  title: "AuthSettingsUpdate",
} as const

export const $Body_auth_reset_forgot_password = {
  properties: {
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
  },
  type: "object",
  required: ["email"],
  title: "Body_auth-reset:forgot_password",
} as const

export const $Body_auth_reset_reset_password = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
    password: {
      type: "string",
      title: "Password",
    },
  },
  type: "object",
  required: ["token", "password"],
  title: "Body_auth-reset:reset_password",
} as const

export const $Body_auth_sso_acs = {
  properties: {
    saml_response: {
      type: "string",
      title: "Saml Response",
    },
  },
  type: "object",
  required: ["saml_response"],
  title: "Body_auth-sso_acs",
} as const

export const $Body_auth_verify_request_token = {
  properties: {
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
  },
  type: "object",
  required: ["email"],
  title: "Body_auth-verify:request-token",
} as const

export const $Body_auth_verify_verify = {
  properties: {
    token: {
      type: "string",
      title: "Token",
    },
  },
  type: "object",
  required: ["token"],
  title: "Body_auth-verify:verify",
} as const

export const $Body_tables_import_csv = {
  properties: {
    file: {
      type: "string",
      format: "binary",
      title: "File",
    },
    column_mapping: {
      type: "string",
      title: "Column Mapping",
    },
  },
  type: "object",
  required: ["file", "column_mapping"],
  title: "Body_tables-import_csv",
} as const

export const $Body_workflows_create_workflow = {
  properties: {
    title: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Title",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    use_workflow_id: {
      type: "boolean",
      title: "Use Workflow Id",
      description: "Use the workflow ID if it is provided in the YAML file",
      default: false,
    },
    file: {
      anyOf: [
        {
          type: "string",
          format: "binary",
        },
        {
          type: "null",
        },
      ],
      title: "File",
    },
  },
  type: "object",
  title: "Body_workflows-create_workflow",
} as const

export const $CaseCreate = {
  properties: {
    summary: {
      type: "string",
      title: "Summary",
    },
    description: {
      type: "string",
      title: "Description",
    },
    status: {
      $ref: "#/components/schemas/CaseStatus",
    },
    priority: {
      $ref: "#/components/schemas/CasePriority",
    },
    severity: {
      $ref: "#/components/schemas/CaseSeverity",
    },
    fields: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Fields",
    },
  },
  type: "object",
  required: ["summary", "description", "status", "priority", "severity"],
  title: "CaseCreate",
} as const

export const $CaseCustomFieldRead = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    type: {
      $ref: "#/components/schemas/SqlType",
    },
    description: {
      type: "string",
      title: "Description",
    },
    nullable: {
      type: "boolean",
      title: "Nullable",
    },
    default: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Default",
    },
    reserved: {
      type: "boolean",
      title: "Reserved",
    },
    value: {
      title: "Value",
    },
  },
  type: "object",
  required: [
    "id",
    "type",
    "description",
    "nullable",
    "default",
    "reserved",
    "value",
  ],
  title: "CaseCustomFieldRead",
} as const

export const $CaseFieldCreate = {
  properties: {
    name: {
      type: "string",
      maxLength: 100,
      minLength: 1,
      title: "Name",
      description: "The name of the column",
    },
    type: {
      $ref: "#/components/schemas/SqlType",
      maxLength: 100,
      minLength: 1,
      description: "The SQL type of the column",
    },
    nullable: {
      type: "boolean",
      title: "Nullable",
      default: true,
    },
    default: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Default",
    },
  },
  type: "object",
  required: ["name", "type"],
  title: "CaseFieldCreate",
  description: "Create a new case field.",
} as const

export const $CaseFieldRead = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    type: {
      $ref: "#/components/schemas/SqlType",
    },
    description: {
      type: "string",
      title: "Description",
    },
    nullable: {
      type: "boolean",
      title: "Nullable",
    },
    default: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Default",
    },
    reserved: {
      type: "boolean",
      title: "Reserved",
    },
  },
  type: "object",
  required: ["id", "type", "description", "nullable", "default", "reserved"],
  title: "CaseFieldRead",
  description: "Read model for a case field.",
} as const

export const $CaseFieldUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
      description: "The name of the column",
    },
    type: {
      anyOf: [
        {
          $ref: "#/components/schemas/SqlType",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      description: "The SQL type of the column",
    },
    nullable: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Nullable",
      description: "Whether the column can be null",
    },
    default: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Default",
      description: "The default value of the column",
    },
  },
  type: "object",
  title: "CaseFieldUpdate",
  description: "Update a case field.",
} as const

export const $CasePriority = {
  type: "string",
  enum: ["unknown", "low", "medium", "high", "critical", "other"],
  title: "CasePriority",
  description: `Case priority values aligned with urgency levels.

Values:
    UNKNOWN (0): No priority is assigned
    LOW (1): Application or personal procedure is unusable, where a workaround is available or a repair is possible
    MEDIUM (2): Non-critical function or procedure is unusable or hard to use causing operational disruptions with no direct impact on a service's availability. A workaround is available
    HIGH (3): Critical functionality or network access is interrupted, degraded or unusable, having a severe impact on services availability. No acceptable alternative is possible
    CRITICAL (4): Interruption making a critical functionality inaccessible or a complete network interruption causing a severe impact on services availability. There is no possible alternative
    OTHER (99): The priority is not normalized`,
} as const

export const $CaseRead = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    short_id: {
      type: "string",
      title: "Short Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    summary: {
      type: "string",
      title: "Summary",
    },
    status: {
      $ref: "#/components/schemas/CaseStatus",
    },
    priority: {
      $ref: "#/components/schemas/CasePriority",
    },
    severity: {
      $ref: "#/components/schemas/CaseSeverity",
    },
    description: {
      type: "string",
      title: "Description",
    },
    fields: {
      items: {
        $ref: "#/components/schemas/CaseCustomFieldRead",
      },
      type: "array",
      title: "Fields",
    },
  },
  type: "object",
  required: [
    "id",
    "short_id",
    "created_at",
    "updated_at",
    "summary",
    "status",
    "priority",
    "severity",
    "description",
    "fields",
  ],
  title: "CaseRead",
} as const

export const $CaseReadMinimal = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    short_id: {
      type: "string",
      title: "Short Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    summary: {
      type: "string",
      title: "Summary",
    },
    status: {
      $ref: "#/components/schemas/CaseStatus",
    },
    priority: {
      $ref: "#/components/schemas/CasePriority",
    },
    severity: {
      $ref: "#/components/schemas/CaseSeverity",
    },
  },
  type: "object",
  required: [
    "id",
    "short_id",
    "created_at",
    "updated_at",
    "summary",
    "status",
    "priority",
    "severity",
  ],
  title: "CaseReadMinimal",
} as const

export const $CaseSeverity = {
  type: "string",
  enum: [
    "unknown",
    "informational",
    "low",
    "medium",
    "high",
    "critical",
    "fatal",
    "other",
  ],
  title: "CaseSeverity",
  description: `Case severity values aligned with OCSF severity values.

Values:
    UNKNOWN (0): The event/finding severity is unknown
    INFORMATIONAL (1): Informational message. No action required
    LOW (2): The user decides if action is needed
    MEDIUM (3): Action is required but the situation is not serious at this time
    HIGH (4): Action is required immediately
    CRITICAL (5): Action is required immediately and the scope is broad
    FATAL (6): An error occurred but it is too late to take remedial action
    OTHER (99): The event/finding severity is not mapped`,
} as const

export const $CaseStatus = {
  type: "string",
  enum: [
    "unknown",
    "new",
    "in_progress",
    "on_hold",
    "resolved",
    "closed",
    "other",
  ],
  title: "CaseStatus",
  description: "Case status values aligned with OCSF Incident Finding status.",
} as const

export const $CaseUpdate = {
  properties: {
    summary: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Summary",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    status: {
      anyOf: [
        {
          $ref: "#/components/schemas/CaseStatus",
        },
        {
          type: "null",
        },
      ],
    },
    priority: {
      anyOf: [
        {
          $ref: "#/components/schemas/CasePriority",
        },
        {
          type: "null",
        },
      ],
    },
    severity: {
      anyOf: [
        {
          $ref: "#/components/schemas/CaseSeverity",
        },
        {
          type: "null",
        },
      ],
    },
    fields: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Fields",
    },
  },
  type: "object",
  title: "CaseUpdate",
} as const

export const $CommentCreate = {
  properties: {
    content: {
      type: "string",
      title: "Content",
    },
  },
  type: "object",
  required: ["content"],
  title: "CommentCreate",
} as const

export const $CommentUpdate = {
  properties: {
    content: {
      type: "string",
      title: "Content",
    },
  },
  type: "object",
  required: ["content"],
  title: "CommentUpdate",
} as const

export const $CreateWorkspaceMembershipParams = {
  properties: {
    user_id: {
      type: "string",
      format: "uuid4",
      title: "User Id",
    },
  },
  type: "object",
  required: ["user_id"],
  title: "CreateWorkspaceMembershipParams",
} as const

export const $CreateWorkspaceParams = {
  properties: {
    name: {
      type: "string",
      maxLength: 100,
      minLength: 1,
      title: "Name",
    },
    settings: {
      anyOf: [
        {
          additionalProperties: {
            type: "string",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Settings",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
      default: "00000000-0000-0000-0000-000000000000",
    },
  },
  type: "object",
  required: ["name"],
  title: "CreateWorkspaceParams",
} as const

export const $DSLConfig_Input = {
  properties: {
    scheduler: {
      type: "string",
      enum: ["static", "dynamic"],
      title: "Scheduler",
      description: "The type of scheduler to use.",
      default: "dynamic",
    },
    environment: {
      type: "string",
      title: "Environment",
      description:
        "The workflow's target execution environment. This is used to isolate secrets across different environments.If not provided, the default environment (default) is used.",
      default: "default",
    },
    timeout: {
      type: "number",
      title: "Timeout",
      description:
        "The maximum number of seconds to wait for the workflow to complete.",
      default: 300,
    },
  },
  type: "object",
  title: "DSLConfig",
  description: `This is the runtime configuration for the workflow.

Activities don't need access to this.`,
} as const

export const $DSLConfig_Output = {
  properties: {
    environment: {
      type: "string",
      title: "Environment",
      description:
        "The workflow's target execution environment. This is used to isolate secrets across different environments.If not provided, the default environment (default) is used.",
      default: "default",
    },
    timeout: {
      type: "number",
      title: "Timeout",
      description:
        "The maximum number of seconds to wait for the workflow to complete.",
      default: 300,
    },
  },
  type: "object",
  title: "DSLConfig",
  description: `This is the runtime configuration for the workflow.

Activities don't need access to this.`,
} as const

export const $DSLEntrypoint = {
  properties: {
    ref: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Ref",
      description: "The entrypoint action ref",
    },
    expects: {
      anyOf: [
        {
          additionalProperties: {
            $ref: "#/components/schemas/ExpectedField",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Expects",
      description:
        "Expected trigger input schema. Use this to specify the expected shape of the trigger input.",
    },
  },
  type: "object",
  title: "DSLEntrypoint",
} as const

export const $DSLInput = {
  properties: {
    title: {
      type: "string",
      title: "Title",
    },
    description: {
      type: "string",
      title: "Description",
    },
    entrypoint: {
      $ref: "#/components/schemas/DSLEntrypoint",
    },
    actions: {
      items: {
        $ref: "#/components/schemas/ActionStatement",
      },
      type: "array",
      title: "Actions",
    },
    config: {
      $ref: "#/components/schemas/DSLConfig-Output",
    },
    triggers: {
      items: {
        $ref: "#/components/schemas/Trigger",
      },
      type: "array",
      title: "Triggers",
    },
    inputs: {
      type: "object",
      title: "Inputs",
      description: "Static input parameters",
    },
    returns: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Returns",
      description: "The action ref or value to return.",
    },
    error_handler: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Error Handler",
      description: "The action ref to handle errors.",
    },
  },
  type: "object",
  required: ["title", "description", "entrypoint", "actions"],
  title: "DSLInput",
  description: `DSL definition for a workflow.

The difference between this and a normal workflow engine is that here,
our workflow execution order is defined by the DSL itself, independent
of a workflow scheduler.

With a traditional
This allows the execution of the workflow to be fully deterministic.`,
} as const

export const $DSLRunArgs = {
  properties: {
    role: {
      $ref: "#/components/schemas/Role",
    },
    dsl: {
      anyOf: [
        {
          $ref: "#/components/schemas/DSLInput",
        },
        {
          type: "null",
        },
      ],
    },
    wf_id: {
      type: "string",
      title: "Wf Id",
    },
    trigger_inputs: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Trigger Inputs",
    },
    parent_run_context: {
      anyOf: [
        {
          $ref: "#/components/schemas/RunContext",
        },
        {
          type: "null",
        },
      ],
    },
    runtime_config: {
      $ref: "#/components/schemas/DSLConfig-Output",
      description:
        "Runtime configuration that can be set on workflow entry. Note that this can override the default config in DSLInput.",
    },
    timeout: {
      type: "string",
      format: "duration",
      title: "Timeout",
      description: "The maximum time to wait for the workflow to complete.",
    },
    schedule_id: {
      anyOf: [
        {
          type: "string",
          pattern: "sch-[0-9a-f]{32}",
        },
        {
          type: "null",
        },
      ],
      title: "Schedule Id",
      description: "The schedule ID that triggered this workflow, if any.",
    },
  },
  type: "object",
  required: ["role", "wf_id"],
  title: "DSLRunArgs",
} as const

export const $EditorActionRead = {
  properties: {
    type: {
      type: "string",
      title: "Type",
    },
    ref: {
      type: "string",
      title: "Ref",
    },
    description: {
      type: "string",
      title: "Description",
    },
  },
  type: "object",
  required: ["type", "ref", "description"],
  title: "EditorActionRead",
} as const

export const $EditorFunctionRead = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      type: "string",
      title: "Description",
    },
    parameters: {
      items: {
        $ref: "#/components/schemas/EditorParamRead",
      },
      type: "array",
      title: "Parameters",
    },
    return_type: {
      type: "string",
      title: "Return Type",
    },
  },
  type: "object",
  required: ["name", "description", "parameters", "return_type"],
  title: "EditorFunctionRead",
} as const

export const $EditorParamRead = {
  properties: {
    name: {
      type: "string",
      title: "Name",
    },
    type: {
      type: "string",
      title: "Type",
    },
    optional: {
      type: "boolean",
      title: "Optional",
    },
  },
  type: "object",
  required: ["name", "type", "optional"],
  title: "EditorParamRead",
} as const

export const $ErrorModel = {
  properties: {
    detail: {
      anyOf: [
        {
          type: "string",
        },
        {
          additionalProperties: {
            type: "string",
          },
          type: "object",
        },
      ],
      title: "Detail",
    },
  },
  type: "object",
  required: ["detail"],
  title: "ErrorModel",
} as const

export const $EventFailure = {
  properties: {
    message: {
      type: "string",
      title: "Message",
    },
    cause: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Cause",
    },
  },
  type: "object",
  required: ["message"],
  title: "EventFailure",
} as const

export const $EventGroup = {
  properties: {
    event_id: {
      type: "integer",
      title: "Event Id",
    },
    udf_namespace: {
      type: "string",
      title: "Udf Namespace",
    },
    udf_name: {
      type: "string",
      title: "Udf Name",
    },
    udf_key: {
      type: "string",
      title: "Udf Key",
    },
    action_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Action Id",
    },
    action_ref: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Action Ref",
    },
    action_title: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Action Title",
    },
    action_description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Action Description",
    },
    action_input: {
      anyOf: [
        {
          $ref: "#/components/schemas/RunActionInput",
        },
        {
          $ref: "#/components/schemas/DSLRunArgs",
        },
        {
          $ref: "#/components/schemas/GetWorkflowDefinitionActivityInputs",
        },
        {
          $ref: "#/components/schemas/InteractionResult",
        },
        {
          $ref: "#/components/schemas/InteractionInput",
        },
      ],
      title: "Action Input",
    },
    action_result: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Action Result",
    },
    current_attempt: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Current Attempt",
    },
    retry_policy: {
      $ref: "#/components/schemas/ActionRetryPolicy",
    },
    start_delay: {
      type: "number",
      title: "Start Delay",
      default: 0,
    },
    join_strategy: {
      $ref: "#/components/schemas/JoinStrategy",
      default: "all",
    },
    related_wf_exec_id: {
      anyOf: [
        {
          type: "string",
          pattern:
            "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
        },
        {
          type: "null",
        },
      ],
      title: "Related Wf Exec Id",
    },
  },
  type: "object",
  required: [
    "event_id",
    "udf_namespace",
    "udf_name",
    "udf_key",
    "action_input",
  ],
  title: "EventGroup",
} as const

export const $ExpectedField = {
  properties: {
    type: {
      type: "string",
      title: "Type",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    default: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Default",
    },
  },
  type: "object",
  required: ["type"],
  title: "ExpectedField",
} as const

export const $ExprContext = {
  type: "string",
  enum: [
    "ACTIONS",
    "SECRETS",
    "FN",
    "INPUTS",
    "ENV",
    "TRIGGER",
    "var",
    "inputs",
    "steps",
  ],
  title: "ExprContext",
  description: "Expression contexts.",
} as const

export const $GetWorkflowDefinitionActivityInputs = {
  properties: {
    role: {
      $ref: "#/components/schemas/Role",
    },
    workflow_id: {
      type: "string",
      title: "Workflow Id",
    },
    version: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Version",
    },
    task: {
      anyOf: [
        {
          $ref: "#/components/schemas/ActionStatement",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: ["role", "workflow_id"],
  title: "GetWorkflowDefinitionActivityInputs",
} as const

export const $GitSettingsRead = {
  properties: {
    git_allowed_domains: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Git Allowed Domains",
    },
    git_repo_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Git Repo Url",
    },
    git_repo_package_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Git Repo Package Name",
    },
  },
  type: "object",
  required: ["git_allowed_domains"],
  title: "GitSettingsRead",
} as const

export const $GitSettingsUpdate = {
  properties: {
    git_allowed_domains: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Git Allowed Domains",
      description: "Allowed git domains for authentication.",
    },
    git_repo_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Git Repo Url",
    },
    git_repo_package_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Git Repo Package Name",
    },
  },
  type: "object",
  title: "GitSettingsUpdate",
} as const

export const $HTTPValidationError = {
  properties: {
    detail: {
      items: {
        $ref: "#/components/schemas/ValidationError",
      },
      type: "array",
      title: "Detail",
    },
  },
  type: "object",
  title: "HTTPValidationError",
} as const

export const $InteractionCategory = {
  type: "string",
  enum: ["slack"],
  title: "InteractionCategory",
} as const

export const $InteractionContext = {
  properties: {
    interaction_id: {
      type: "string",
      format: "uuid",
      title: "Interaction Id",
    },
    execution_id: {
      type: "string",
      pattern:
        "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
      title: "Execution Id",
    },
    action_ref: {
      type: "string",
      title: "Action Ref",
    },
  },
  type: "object",
  required: ["interaction_id", "execution_id", "action_ref"],
  title: "InteractionContext",
  description: "The context of the interaction.",
} as const

export const $InteractionInput = {
  properties: {
    interaction_id: {
      type: "string",
      format: "uuid",
      title: "Interaction Id",
    },
    execution_id: {
      type: "string",
      pattern:
        "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
      title: "Execution Id",
    },
    action_ref: {
      type: "string",
      title: "Action Ref",
    },
    data: {
      type: "object",
      title: "Data",
    },
  },
  type: "object",
  required: ["interaction_id", "execution_id", "action_ref", "data"],
  title: "InteractionInput",
  description:
    "Input for the workflow interaction handler. This is used on the client side.",
} as const

export const $InteractionResult = {
  properties: {
    message: {
      type: "string",
      title: "Message",
    },
    detail: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Detail",
    },
  },
  type: "object",
  required: ["message"],
  title: "InteractionResult",
  description:
    "Output for the workflow interaction handler. This is used on the client side.",
} as const

export const $InteractionState = {
  properties: {
    type: {
      $ref: "#/components/schemas/InteractionType",
    },
    action_ref: {
      type: "string",
      title: "Action Ref",
    },
    status: {
      $ref: "#/components/schemas/InteractionStatus",
    },
    data: {
      type: "object",
      title: "Data",
    },
  },
  type: "object",
  required: ["type", "action_ref", "status"],
  title: "InteractionState",
} as const

export const $InteractionStatus = {
  type: "string",
  enum: ["idle", "pending", "completed"],
  title: "InteractionStatus",
} as const

export const $InteractionType = {
  type: "string",
  enum: ["approval", "response"],
  title: "InteractionType",
} as const

export const $JoinStrategy = {
  type: "string",
  enum: ["any", "all"],
  title: "JoinStrategy",
} as const

export const $OAuth2AuthorizeResponse = {
  properties: {
    authorization_url: {
      type: "string",
      title: "Authorization Url",
    },
  },
  type: "object",
  required: ["authorization_url"],
  title: "OAuth2AuthorizeResponse",
} as const

export const $OAuthSettingsRead = {
  properties: {
    oauth_google_enabled: {
      type: "boolean",
      title: "Oauth Google Enabled",
    },
  },
  type: "object",
  required: ["oauth_google_enabled"],
  title: "OAuthSettingsRead",
  description: "Settings for OAuth authentication.",
} as const

export const $OAuthSettingsUpdate = {
  properties: {
    oauth_google_enabled: {
      type: "boolean",
      title: "Oauth Google Enabled",
      description: "Whether OAuth is enabled.",
      default: true,
    },
  },
  type: "object",
  title: "OAuthSettingsUpdate",
  description: "Settings for OAuth authentication.",
} as const

export const $OrgMemberRead = {
  properties: {
    user_id: {
      type: "string",
      format: "uuid4",
      title: "User Id",
    },
    first_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "First Name",
    },
    last_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Last Name",
    },
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
    role: {
      $ref: "#/components/schemas/UserRole",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
    },
    is_superuser: {
      type: "boolean",
      title: "Is Superuser",
    },
    is_verified: {
      type: "boolean",
      title: "Is Verified",
    },
    last_login_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Login At",
    },
  },
  type: "object",
  required: [
    "user_id",
    "first_name",
    "last_name",
    "email",
    "role",
    "is_active",
    "is_superuser",
    "is_verified",
    "last_login_at",
  ],
  title: "OrgMemberRead",
} as const

export const $ReceiveInteractionResponse = {
  properties: {
    message: {
      type: "string",
      title: "Message",
    },
  },
  type: "object",
  required: ["message"],
  title: "ReceiveInteractionResponse",
} as const

export const $RegistryActionCreate = {
  properties: {
    name: {
      type: "string",
      maxLength: 100,
      minLength: 1,
      title: "Name",
      description: "The name of the action",
    },
    description: {
      type: "string",
      maxLength: 1000,
      title: "Description",
      description: "The description of the action",
    },
    namespace: {
      type: "string",
      title: "Namespace",
      description: "The namespace of the action",
    },
    type: {
      type: "string",
      enum: ["udf", "template"],
      title: "Type",
      description: "The type of the action",
    },
    origin: {
      type: "string",
      maxLength: 1000,
      minLength: 1,
      title: "Origin",
      description: "The origin of the action as a url",
    },
    secrets: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/RegistrySecret",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Secrets",
      description: "The secrets required by the action",
    },
    interface: {
      $ref: "#/components/schemas/RegistryActionInterface",
    },
    implementation: {
      oneOf: [
        {
          $ref: "#/components/schemas/RegistryActionTemplateImpl-Input",
        },
        {
          $ref: "#/components/schemas/RegistryActionUDFImpl",
        },
      ],
      title: "Implementation",
      discriminator: {
        propertyName: "type",
        mapping: {
          template: "#/components/schemas/RegistryActionTemplateImpl-Input",
          udf: "#/components/schemas/RegistryActionUDFImpl",
        },
      },
    },
    default_title: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Default Title",
      description: "The default title of the action",
    },
    display_group: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Display Group",
      description: "The presentation group of the action",
    },
    doc_url: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Doc Url",
      description: "Link to documentation",
    },
    author: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Author",
      description: "Author of the action",
    },
    deprecated: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Deprecated",
      description: "Marks action as deprecated along with message",
    },
    options: {
      $ref: "#/components/schemas/RegistryActionOptions",
      description: "The options for the action",
    },
    repository_id: {
      type: "string",
      format: "uuid4",
      title: "Repository Id",
      description: "The repository id",
    },
  },
  type: "object",
  required: [
    "name",
    "description",
    "namespace",
    "type",
    "origin",
    "interface",
    "implementation",
    "repository_id",
  ],
  title: "RegistryActionCreate",
  description: "API create model for a registered action.",
} as const

export const $RegistryActionInterface = {
  properties: {
    expects: {
      type: "object",
      title: "Expects",
    },
    returns: {
      title: "Returns",
    },
  },
  type: "object",
  required: ["expects", "returns"],
  title: "RegistryActionInterface",
} as const

export const $RegistryActionOptions = {
  properties: {
    include_in_schema: {
      type: "boolean",
      title: "Include In Schema",
      default: true,
    },
  },
  type: "object",
  title: "RegistryActionOptions",
} as const

export const $RegistryActionRead = {
  properties: {
    name: {
      type: "string",
      maxLength: 100,
      minLength: 1,
      title: "Name",
      description: "The name of the action",
    },
    description: {
      type: "string",
      maxLength: 1000,
      title: "Description",
      description: "The description of the action",
    },
    namespace: {
      type: "string",
      title: "Namespace",
      description: "The namespace of the action",
    },
    type: {
      type: "string",
      enum: ["udf", "template"],
      title: "Type",
      description: "The type of the action",
    },
    origin: {
      type: "string",
      maxLength: 1000,
      minLength: 1,
      title: "Origin",
      description: "The origin of the action as a url",
    },
    secrets: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/RegistrySecret",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Secrets",
      description: "The secrets required by the action",
    },
    interface: {
      $ref: "#/components/schemas/RegistryActionInterface",
    },
    implementation: {
      oneOf: [
        {
          $ref: "#/components/schemas/RegistryActionTemplateImpl-Output",
        },
        {
          $ref: "#/components/schemas/RegistryActionUDFImpl",
        },
      ],
      title: "Implementation",
      discriminator: {
        propertyName: "type",
        mapping: {
          template: "#/components/schemas/RegistryActionTemplateImpl-Output",
          udf: "#/components/schemas/RegistryActionUDFImpl",
        },
      },
    },
    default_title: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Default Title",
      description: "The default title of the action",
    },
    display_group: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Display Group",
      description: "The presentation group of the action",
    },
    doc_url: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Doc Url",
      description: "Link to documentation",
    },
    author: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Author",
      description: "Author of the action",
    },
    deprecated: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Deprecated",
      description: "Marks action as deprecated along with message",
    },
    options: {
      $ref: "#/components/schemas/RegistryActionOptions",
      description: "The options for the action",
    },
    repository_id: {
      type: "string",
      format: "uuid4",
      title: "Repository Id",
      description: "The repository id",
    },
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
      description: "The registry action id",
    },
    action: {
      type: "string",
      title: "Action",
      description: "The full action identifier.",
      readOnly: true,
    },
    is_template: {
      type: "boolean",
      title: "Is Template",
      description: "Whether the action is a template.",
      readOnly: true,
    },
  },
  type: "object",
  required: [
    "name",
    "description",
    "namespace",
    "type",
    "origin",
    "interface",
    "implementation",
    "repository_id",
    "id",
    "action",
    "is_template",
  ],
  title: "RegistryActionRead",
  description: "API read model for a registered action.",
} as const

export const $RegistryActionReadMinimal = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
      description: "The registry action id",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the action",
    },
    description: {
      type: "string",
      title: "Description",
      description: "The description of the action",
    },
    namespace: {
      type: "string",
      title: "Namespace",
      description: "The namespace of the action",
    },
    type: {
      type: "string",
      enum: ["udf", "template"],
      title: "Type",
      description: "The type of the action",
    },
    origin: {
      type: "string",
      title: "Origin",
      description: "The origin of the action as a url",
    },
    default_title: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Default Title",
      description: "The default title of the action",
    },
    display_group: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Display Group",
      description: "The presentation group of the action",
    },
    action: {
      type: "string",
      title: "Action",
      description: "The full action identifier.",
      readOnly: true,
    },
  },
  type: "object",
  required: [
    "id",
    "name",
    "description",
    "namespace",
    "type",
    "origin",
    "action",
  ],
  title: "RegistryActionReadMinimal",
  description: "API minimal read model for a registered action.",
} as const

export const $RegistryActionTemplateImpl_Input = {
  properties: {
    type: {
      type: "string",
      const: "template",
      title: "Type",
      default: "template",
    },
    template_action: {
      $ref: "#/components/schemas/TemplateAction-Input",
      description: "The template action",
    },
  },
  type: "object",
  required: ["template_action"],
  title: "RegistryActionTemplateImpl",
} as const

export const $RegistryActionTemplateImpl_Output = {
  properties: {
    type: {
      type: "string",
      const: "template",
      title: "Type",
      default: "template",
    },
    template_action: {
      $ref: "#/components/schemas/TemplateAction-Output",
      description: "The template action",
    },
  },
  type: "object",
  required: ["template_action"],
  title: "RegistryActionTemplateImpl",
} as const

export const $RegistryActionUDFImpl = {
  properties: {
    type: {
      type: "string",
      const: "udf",
      title: "Type",
      default: "udf",
    },
    url: {
      type: "string",
      title: "Url",
      description: "The package url",
    },
    module: {
      type: "string",
      title: "Module",
      description: "The module name",
    },
    name: {
      type: "string",
      title: "Name",
      description: "The name of the UDF function name",
    },
  },
  type: "object",
  required: ["url", "module", "name"],
  title: "RegistryActionUDFImpl",
} as const

export const $RegistryActionUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
      description: "Update the name of the action",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
      description: "Update the description of the action",
    },
    secrets: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/RegistrySecret",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Secrets",
      description: "Update the secrets of the action",
    },
    interface: {
      anyOf: [
        {
          $ref: "#/components/schemas/RegistryActionInterface",
        },
        {
          type: "null",
        },
      ],
      description: "Update the interface of the action",
    },
    implementation: {
      anyOf: [
        {
          oneOf: [
            {
              $ref: "#/components/schemas/RegistryActionTemplateImpl-Input",
            },
            {
              $ref: "#/components/schemas/RegistryActionUDFImpl",
            },
          ],
          discriminator: {
            propertyName: "type",
            mapping: {
              template: "#/components/schemas/RegistryActionTemplateImpl-Input",
              udf: "#/components/schemas/RegistryActionUDFImpl",
            },
          },
        },
        {
          type: "null",
        },
      ],
      title: "Implementation",
      description: "Update the implementation of the action",
    },
    default_title: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Default Title",
      description: "Update the default title of the action",
    },
    display_group: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Display Group",
      description: "Update the display group of the action",
    },
    doc_url: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Doc Url",
      description: "Update the doc url of the action",
    },
    author: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Author",
      description: "Update the author of the action",
    },
    deprecated: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Deprecated",
      description: "Update the deprecation message of the action",
    },
    options: {
      anyOf: [
        {
          $ref: "#/components/schemas/RegistryActionOptions",
        },
        {
          type: "null",
        },
      ],
      description: "Update the options of the action",
    },
  },
  type: "object",
  title: "RegistryActionUpdate",
  description: "API update model for a registered action.",
} as const

export const $RegistryActionValidateResponse = {
  properties: {
    ok: {
      type: "boolean",
      title: "Ok",
    },
    message: {
      type: "string",
      title: "Message",
    },
    detail: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Detail",
    },
    action_ref: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Action Ref",
    },
  },
  type: "object",
  required: ["ok", "message"],
  title: "RegistryActionValidateResponse",
} as const

export const $RegistryActionValidationErrorInfo = {
  properties: {
    type: {
      $ref: "#/components/schemas/TemplateActionValidationErrorType",
    },
    details: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Details",
    },
    is_template: {
      type: "boolean",
      title: "Is Template",
    },
    loc_primary: {
      type: "string",
      title: "Loc Primary",
    },
    loc_secondary: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Loc Secondary",
    },
  },
  type: "object",
  required: ["type", "details", "is_template", "loc_primary"],
  title: "RegistryActionValidationErrorInfo",
} as const

export const $RegistryRepositoryCreate = {
  properties: {
    origin: {
      type: "string",
      maxLength: 255,
      minLength: 1,
      title: "Origin",
      description: "The origin of the repository",
    },
  },
  type: "object",
  required: ["origin"],
  title: "RegistryRepositoryCreate",
} as const

export const $RegistryRepositoryErrorDetail = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    origin: {
      type: "string",
      title: "Origin",
    },
    message: {
      type: "string",
      title: "Message",
    },
    errors: {
      additionalProperties: {
        items: {
          $ref: "#/components/schemas/RegistryActionValidationErrorInfo",
        },
        type: "array",
      },
      type: "object",
      title: "Errors",
    },
  },
  type: "object",
  required: ["id", "origin", "message", "errors"],
  title: "RegistryRepositoryErrorDetail",
  description: "Error response model for registry sync failures.",
} as const

export const $RegistryRepositoryRead = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    origin: {
      type: "string",
      title: "Origin",
    },
    last_synced_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Synced At",
    },
    commit_sha: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Commit Sha",
    },
    actions: {
      items: {
        $ref: "#/components/schemas/RegistryActionRead",
      },
      type: "array",
      title: "Actions",
    },
  },
  type: "object",
  required: ["id", "origin", "last_synced_at", "commit_sha", "actions"],
  title: "RegistryRepositoryRead",
} as const

export const $RegistryRepositoryReadMinimal = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    origin: {
      type: "string",
      title: "Origin",
    },
    last_synced_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Synced At",
    },
    commit_sha: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Commit Sha",
    },
  },
  type: "object",
  required: ["id", "origin", "last_synced_at", "commit_sha"],
  title: "RegistryRepositoryReadMinimal",
} as const

export const $RegistryRepositoryUpdate = {
  properties: {
    last_synced_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Last Synced At",
    },
    commit_sha: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Commit Sha",
      description: "The commit SHA of the repository",
    },
    origin: {
      anyOf: [
        {
          type: "string",
          maxLength: 255,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Origin",
      description: "The origin of the repository",
    },
  },
  type: "object",
  title: "RegistryRepositoryUpdate",
} as const

export const $RegistrySecret = {
  properties: {
    name: {
      type: "string",
      pattern: "[a-z0-9_]+",
      title: "Name",
    },
    keys: {
      anyOf: [
        {
          items: {
            type: "string",
            pattern: "[a-zA-Z0-9_]+",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Keys",
    },
    optional_keys: {
      anyOf: [
        {
          items: {
            type: "string",
            pattern: "[a-zA-Z0-9_]+",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Optional Keys",
    },
    optional: {
      type: "boolean",
      title: "Optional",
      default: false,
    },
  },
  type: "object",
  required: ["name"],
  title: "RegistrySecret",
} as const

export const $ResponseInteraction = {
  properties: {
    type: {
      type: "string",
      const: "response",
      title: "Type",
    },
    timeout: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Timeout",
      description: "The timeout for the interaction in seconds.",
    },
  },
  type: "object",
  required: ["type"],
  title: "ResponseInteraction",
  description: "Configuration for a response interaction.",
} as const

export const $Role = {
  properties: {
    type: {
      type: "string",
      enum: ["user", "service"],
      title: "Type",
    },
    workspace_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid4",
        },
        {
          type: "null",
        },
      ],
      title: "Workspace Id",
    },
    user_id: {
      anyOf: [
        {
          type: "string",
          format: "uuid4",
        },
        {
          type: "null",
        },
      ],
      title: "User Id",
    },
    access_level: {
      $ref: "#/components/schemas/AccessLevel",
      default: 0,
    },
    service_id: {
      type: "string",
      enum: [
        "tracecat-runner",
        "tracecat-api",
        "tracecat-cli",
        "tracecat-schedule-runner",
        "tracecat-service",
        "tracecat-executor",
        "tracecat-bootstrap",
      ],
      title: "Service Id",
    },
  },
  type: "object",
  required: ["type", "service_id"],
  title: "Role",
  description: `The identity and authorization of a user or service.

Params
------
type : Literal["user", "service"]
    The type of role.
user_id : UUID | None
    The user's ID, or the service's user_id.
    This can be None for internal services, or when a user hasn't been set for the role.
service_id : str | None = None
    The service's role name, or None if the role is a user.


User roles
----------
- User roles are authenticated via JWT.
- The \`user_id\` is the user's JWT 'sub' claim.
- User roles do not have an associated \`service_id\`, this must be None.

Service roles
-------------
- Service roles are authenticated via API key.
- Used for internal services to authenticate with the API.
- A service's \`user_id\` is the user it's acting on behalf of. This can be None for internal services.`,
} as const

export const $RunActionInput = {
  properties: {
    task: {
      $ref: "#/components/schemas/ActionStatement",
    },
    exec_context: {
      propertyNames: {
        $ref: "#/components/schemas/ExprContext",
      },
      type: "object",
      title: "Exec Context",
    },
    run_context: {
      $ref: "#/components/schemas/RunContext",
    },
    interaction_context: {
      anyOf: [
        {
          $ref: "#/components/schemas/InteractionContext",
        },
        {
          type: "null",
        },
      ],
    },
  },
  type: "object",
  required: ["task", "exec_context", "run_context"],
  title: "RunActionInput",
  description:
    "This object contains all the information needed to execute an action.",
} as const

export const $RunContext = {
  properties: {
    wf_id: {
      type: "string",
      title: "Wf Id",
    },
    wf_exec_id: {
      type: "string",
      pattern:
        "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
      title: "Wf Exec Id",
    },
    wf_run_id: {
      type: "string",
      format: "uuid4",
      title: "Wf Run Id",
    },
    environment: {
      type: "string",
      title: "Environment",
    },
  },
  type: "object",
  required: ["wf_id", "wf_exec_id", "wf_run_id", "environment"],
  title: "RunContext",
  description:
    "This is the runtime context model for a workflow run. Passed into activities.",
} as const

export const $SAMLDatabaseLoginResponse = {
  properties: {
    redirect_url: {
      type: "string",
      title: "Redirect Url",
    },
  },
  type: "object",
  required: ["redirect_url"],
  title: "SAMLDatabaseLoginResponse",
} as const

export const $SAMLSettingsRead = {
  properties: {
    saml_enabled: {
      type: "boolean",
      title: "Saml Enabled",
    },
    saml_enforced: {
      type: "boolean",
      title: "Saml Enforced",
    },
    saml_idp_metadata_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Saml Idp Metadata Url",
    },
    saml_sp_acs_url: {
      type: "string",
      title: "Saml Sp Acs Url",
    },
  },
  type: "object",
  required: ["saml_enabled", "saml_enforced", "saml_sp_acs_url"],
  title: "SAMLSettingsRead",
} as const

export const $SAMLSettingsUpdate = {
  properties: {
    saml_enabled: {
      type: "boolean",
      title: "Saml Enabled",
      description: "Whether SAML is enabled.",
      default: true,
    },
    saml_enforced: {
      type: "boolean",
      title: "Saml Enforced",
      description:
        "Whether SAML is enforced. If true, users can only use SAML to authenticate. Requires SAML to be enabled.",
      default: false,
    },
    saml_idp_metadata_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Saml Idp Metadata Url",
    },
  },
  type: "object",
  title: "SAMLSettingsUpdate",
} as const

export const $Schedule = {
  properties: {
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    id: {
      type: "string",
      title: "Id",
    },
    status: {
      type: "string",
      title: "Status",
      default: "online",
    },
    cron: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Cron",
    },
    inputs: {
      type: "object",
      title: "Inputs",
    },
    every: {
      type: "string",
      format: "duration",
      title: "Every",
      description: "ISO 8601 duration string",
    },
    offset: {
      anyOf: [
        {
          type: "string",
          format: "duration",
        },
        {
          type: "null",
        },
      ],
      title: "Offset",
      description: "ISO 8601 duration string",
    },
    start_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start At",
      description: "ISO 8601 datetime string",
    },
    end_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End At",
      description: "ISO 8601 datetime string",
    },
    timeout: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Timeout",
      description:
        "The maximum number of seconds to wait for the workflow to complete",
    },
    workflow_id: {
      type: "string",
      format: "uuid",
      title: "Workflow Id",
    },
  },
  type: "object",
  required: ["owner_id", "every", "workflow_id"],
  title: "Schedule",
} as const

export const $ScheduleCreate = {
  properties: {
    workflow_id: {
      anyOf: [
        {
          type: "string",
          pattern: "wf_[0-9a-zA-Z]+",
        },
        {
          type: "string",
          pattern: "wf-[0-9a-f]{32}",
        },
      ],
      title: "Workflow Id",
    },
    inputs: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Inputs",
    },
    cron: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Cron",
    },
    every: {
      type: "string",
      format: "duration",
      title: "Every",
      description: "ISO 8601 duration string",
    },
    offset: {
      anyOf: [
        {
          type: "string",
          format: "duration",
        },
        {
          type: "null",
        },
      ],
      title: "Offset",
      description: "ISO 8601 duration string",
    },
    start_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start At",
      description: "ISO 8601 datetime string",
    },
    end_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End At",
      description: "ISO 8601 datetime string",
    },
    status: {
      type: "string",
      enum: ["online", "offline"],
      title: "Status",
      default: "online",
    },
    timeout: {
      type: "number",
      title: "Timeout",
      description:
        "The maximum number of seconds to wait for the workflow to complete",
      default: 300,
    },
  },
  type: "object",
  required: ["workflow_id", "every"],
  title: "ScheduleCreate",
} as const

export const $ScheduleSearch = {
  properties: {
    workflow_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Workflow Id",
    },
    limit: {
      type: "integer",
      title: "Limit",
      default: 100,
    },
    order_by: {
      type: "string",
      title: "Order By",
      default: "created_at",
    },
    query: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Query",
    },
    group_by: {
      anyOf: [
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Group By",
    },
    agg: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Agg",
    },
  },
  type: "object",
  title: "ScheduleSearch",
} as const

export const $ScheduleUpdate = {
  properties: {
    inputs: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Inputs",
    },
    cron: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Cron",
    },
    every: {
      anyOf: [
        {
          type: "string",
          format: "duration",
        },
        {
          type: "null",
        },
      ],
      title: "Every",
      description: "ISO 8601 duration string",
    },
    offset: {
      anyOf: [
        {
          type: "string",
          format: "duration",
        },
        {
          type: "null",
        },
      ],
      title: "Offset",
      description: "ISO 8601 duration string",
    },
    start_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start At",
      description: "ISO 8601 datetime string",
    },
    end_at: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "End At",
      description: "ISO 8601 datetime string",
    },
    status: {
      anyOf: [
        {
          type: "string",
          enum: ["online", "offline"],
        },
        {
          type: "null",
        },
      ],
      title: "Status",
    },
  },
  type: "object",
  title: "ScheduleUpdate",
} as const

export const $SecretCreate = {
  properties: {
    type: {
      $ref: "#/components/schemas/SecretType",
      default: "custom",
    },
    name: {
      type: "string",
      maxLength: 100,
      minLength: 1,
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
          minLength: 0,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    keys: {
      items: {
        $ref: "#/components/schemas/SecretKeyValue",
      },
      type: "array",
      maxItems: 100,
      minItems: 1,
      title: "Keys",
    },
    tags: {
      anyOf: [
        {
          additionalProperties: {
            type: "string",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Tags",
    },
    environment: {
      type: "string",
      title: "Environment",
      default: "default",
    },
  },
  type: "object",
  required: ["name", "keys"],
  title: "SecretCreate",
  description: `Create a new secret.

Secret types
------------
- \`custom\`: Arbitrary user-defined types
- \`token\`: A token, e.g. API Key, JWT Token (TBC)
- \`oauth2\`: OAuth2 Client Credentials (TBC)`,
} as const

export const $SecretKeyValue = {
  properties: {
    key: {
      type: "string",
      title: "Key",
    },
    value: {
      type: "string",
      format: "password",
      title: "Value",
      writeOnly: true,
    },
  },
  type: "object",
  required: ["key", "value"],
  title: "SecretKeyValue",
} as const

export const $SecretRead = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    type: {
      $ref: "#/components/schemas/SecretType",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    encrypted_keys: {
      type: "string",
      format: "binary",
      title: "Encrypted Keys",
    },
    environment: {
      type: "string",
      title: "Environment",
    },
    tags: {
      anyOf: [
        {
          additionalProperties: {
            type: "string",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Tags",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  type: "object",
  required: [
    "id",
    "type",
    "name",
    "encrypted_keys",
    "environment",
    "owner_id",
    "created_at",
    "updated_at",
  ],
  title: "SecretRead",
} as const

export const $SecretReadMinimal = {
  properties: {
    id: {
      type: "string",
      title: "Id",
    },
    type: {
      $ref: "#/components/schemas/SecretType",
    },
    name: {
      type: "string",
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    keys: {
      items: {
        type: "string",
      },
      type: "array",
      title: "Keys",
    },
    environment: {
      type: "string",
      title: "Environment",
    },
  },
  type: "object",
  required: ["id", "type", "name", "keys", "environment"],
  title: "SecretReadMinimal",
} as const

export const $SecretType = {
  type: "string",
  enum: ["custom", "ssh-key"],
  title: "SecretType",
  description: "The type of a secret.",
} as const

export const $SecretUpdate = {
  properties: {
    type: {
      anyOf: [
        {
          $ref: "#/components/schemas/SecretType",
        },
        {
          type: "null",
        },
      ],
    },
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
          minLength: 0,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
    },
    keys: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/SecretKeyValue",
          },
          type: "array",
          maxItems: 100,
          minItems: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Keys",
    },
    tags: {
      anyOf: [
        {
          additionalProperties: {
            type: "string",
          },
          type: "object",
          maxProperties: 1000,
          minProperties: 0,
        },
        {
          type: "null",
        },
      ],
      title: "Tags",
    },
    environment: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Environment",
    },
  },
  type: "object",
  title: "SecretUpdate",
  description: `Update a secret.

Secret types
------------
- \`custom\`: Arbitrary user-defined types
- \`token\`: A token, e.g. API Key, JWT Token (TBC)
- \`oauth2\`: OAuth2 Client Credentials (TBC)`,
} as const

export const $SessionRead = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    user_id: {
      type: "string",
      format: "uuid4",
      title: "User Id",
    },
    user_email: {
      type: "string",
      format: "email",
      title: "User Email",
    },
  },
  type: "object",
  required: ["id", "created_at", "user_id", "user_email"],
  title: "SessionRead",
} as const

export const $SpecialUserID = {
  type: "string",
  enum: ["current"],
  title: "SpecialUserID",
  description: "A sentinel user ID that represents the current user.",
} as const

export const $SqlType = {
  type: "string",
  enum: [
    "TEXT",
    "VARCHAR",
    "INTEGER",
    "BIGINT",
    "DECIMAL",
    "BOOLEAN",
    "TIMESTAMP",
    "TIMESTAMPTZ",
    "JSONB",
    "UUID",
  ],
  title: "SqlType",
  description: "Supported SQL types.",
} as const

export const $TableColumnCreate = {
  properties: {
    name: {
      type: "string",
      maxLength: 100,
      minLength: 1,
      title: "Name",
      description: "The name of the column",
    },
    type: {
      $ref: "#/components/schemas/SqlType",
      maxLength: 100,
      minLength: 1,
      description: "The SQL type of the column",
    },
    nullable: {
      type: "boolean",
      title: "Nullable",
      default: true,
    },
    default: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Default",
    },
  },
  type: "object",
  required: ["name", "type"],
  title: "TableColumnCreate",
  description: "Create model for a table column.",
} as const

export const $TableColumnRead = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    type: {
      $ref: "#/components/schemas/SqlType",
    },
    nullable: {
      type: "boolean",
      title: "Nullable",
      default: true,
    },
    default: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Default",
    },
  },
  type: "object",
  required: ["id", "name", "type"],
  title: "TableColumnRead",
  description: "Definition for a table column.",
} as const

export const $TableColumnUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
      description: "The name of the column",
    },
    type: {
      anyOf: [
        {
          $ref: "#/components/schemas/SqlType",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      description: "The SQL type of the column",
    },
    nullable: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Nullable",
      description: "Whether the column can be null",
    },
    default: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Default",
      description: "The default value of the column",
    },
  },
  type: "object",
  title: "TableColumnUpdate",
  description: "Update model for a table column.",
} as const

export const $TableCreate = {
  properties: {
    name: {
      type: "string",
      maxLength: 100,
      minLength: 1,
      title: "Name",
      description: "The name of the table",
    },
    columns: {
      items: {
        $ref: "#/components/schemas/TableColumnCreate",
      },
      type: "array",
      title: "Columns",
      description: "The columns of the table",
    },
  },
  type: "object",
  required: ["name"],
  title: "TableCreate",
  description: "Create model for a table.",
} as const

export const $TableRead = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    columns: {
      items: {
        $ref: "#/components/schemas/TableColumnRead",
      },
      type: "array",
      title: "Columns",
    },
  },
  type: "object",
  required: ["id", "name", "columns"],
  title: "TableRead",
  description: "Read model for a table.",
} as const

export const $TableReadMinimal = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
  },
  type: "object",
  required: ["id", "name"],
  title: "TableReadMinimal",
  description: "Read model for a table.",
} as const

export const $TableRowInsert = {
  properties: {
    data: {
      type: "object",
      title: "Data",
    },
  },
  type: "object",
  required: ["data"],
  title: "TableRowInsert",
  description: "Insert model for a table row.",
} as const

export const $TableRowInsertBatch = {
  properties: {
    rows: {
      items: {
        type: "object",
      },
      type: "array",
      title: "Rows",
    },
  },
  type: "object",
  required: ["rows"],
  title: "TableRowInsertBatch",
  description: "Request body for batch inserting rows.",
} as const

export const $TableRowInsertBatchResponse = {
  properties: {
    rows_inserted: {
      type: "integer",
      title: "Rows Inserted",
    },
  },
  type: "object",
  required: ["rows_inserted"],
  title: "TableRowInsertBatchResponse",
  description: "Response for batch insert operation.",
} as const

export const $TableRowRead = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
  },
  additionalProperties: true,
  type: "object",
  required: ["id", "created_at", "updated_at"],
  title: "TableRowRead",
  description: "Read model for a table row.",
} as const

export const $TableUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
      description: "The name of the table",
    },
  },
  type: "object",
  title: "TableUpdate",
  description: "Update model for a table.",
} as const

export const $TagCreate = {
  properties: {
    name: {
      type: "string",
      maxLength: 50,
      minLength: 1,
      title: "Name",
    },
    color: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Color",
      description: "Hex color code",
    },
  },
  type: "object",
  required: ["name"],
  title: "TagCreate",
  description: "Model for creating new tags with validation.",
} as const

export const $TagRead = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    name: {
      type: "string",
      maxLength: 50,
      minLength: 1,
      title: "Name",
    },
    color: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Color",
      description: "Hex color code",
    },
  },
  type: "object",
  required: ["id", "name"],
  title: "TagRead",
  description: "Model for reading tag data with validation.",
} as const

export const $TagUpdate = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 50,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    color: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Color",
      description: "Hex color code",
    },
  },
  type: "object",
  title: "TagUpdate",
  description: "Model for updating existing tags with validation.",
} as const

export const $TemplateAction_Input = {
  properties: {
    type: {
      type: "string",
      const: "action",
      title: "Type",
      default: "action",
    },
    definition: {
      $ref: "#/components/schemas/TemplateActionDefinition",
    },
  },
  type: "object",
  required: ["definition"],
  title: "TemplateAction",
} as const

export const $TemplateAction_Output = {
  properties: {
    type: {
      type: "string",
      const: "action",
      title: "Type",
      default: "action",
    },
    definition: {
      $ref: "#/components/schemas/TemplateActionDefinition",
    },
  },
  type: "object",
  required: ["definition"],
  title: "TemplateAction",
} as const

export const $TemplateActionDefinition = {
  properties: {
    name: {
      type: "string",
      title: "Name",
      description: "The action name",
    },
    namespace: {
      type: "string",
      title: "Namespace",
      description: "The namespace of the action",
    },
    title: {
      type: "string",
      title: "Title",
      description: "The title of the action",
    },
    description: {
      type: "string",
      title: "Description",
      description: "The description of the action",
      default: "",
    },
    display_group: {
      type: "string",
      title: "Display Group",
      description: "The display group of the action",
    },
    doc_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Doc Url",
      description: "Link to documentation",
    },
    author: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Author",
      description: "Author of the action",
    },
    deprecated: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Deprecated",
      description: "Marks action as deprecated along with message",
    },
    secrets: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/RegistrySecret",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Secrets",
      description: "The secrets to pass to the action",
    },
    expects: {
      additionalProperties: {
        $ref: "#/components/schemas/ExpectedField",
      },
      type: "object",
      title: "Expects",
      description: "The arguments to pass to the action",
    },
    steps: {
      items: {
        $ref: "#/components/schemas/ActionStep",
      },
      type: "array",
      title: "Steps",
      description: "The sequence of steps for the action",
    },
    returns: {
      anyOf: [
        {
          type: "string",
        },
        {
          items: {
            type: "string",
          },
          type: "array",
        },
        {
          type: "object",
        },
      ],
      title: "Returns",
      description: "The result of the action",
    },
  },
  type: "object",
  required: [
    "name",
    "namespace",
    "title",
    "display_group",
    "expects",
    "steps",
    "returns",
  ],
  title: "TemplateActionDefinition",
} as const

export const $TemplateActionValidationErrorType = {
  type: "string",
  enum: [
    "ACTION_NOT_FOUND",
    "ACTION_NAME_CONFLICT",
    "STEP_VALIDATION_ERROR",
    "EXPRESSION_VALIDATION_ERROR",
  ],
  title: "TemplateActionValidationErrorType",
} as const

export const $Trigger = {
  properties: {
    type: {
      type: "string",
      enum: ["schedule", "webhook"],
      title: "Type",
    },
    ref: {
      type: "string",
      pattern: "^[a-z0-9_]+$",
      title: "Ref",
    },
    args: {
      type: "object",
      title: "Args",
    },
  },
  type: "object",
  required: ["type", "ref"],
  title: "Trigger",
} as const

export const $TriggerType = {
  type: "string",
  enum: ["manual", "scheduled", "webhook"],
  title: "TriggerType",
  description: "Trigger type for a workflow execution.",
} as const

export const $UpdateWorkspaceParams = {
  properties: {
    name: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 1,
        },
        {
          type: "null",
        },
      ],
      title: "Name",
    },
    settings: {
      anyOf: [
        {
          additionalProperties: {
            type: "string",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Settings",
    },
  },
  type: "object",
  title: "UpdateWorkspaceParams",
} as const

export const $UserCreate = {
  properties: {
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
    password: {
      type: "string",
      title: "Password",
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
      default: true,
    },
    is_superuser: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Superuser",
      default: false,
    },
    is_verified: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Verified",
      default: false,
    },
    role: {
      $ref: "#/components/schemas/UserRole",
      default: "basic",
    },
    first_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "First Name",
    },
    last_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Last Name",
    },
  },
  type: "object",
  required: ["email", "password"],
  title: "UserCreate",
} as const

export const $UserRead = {
  properties: {
    id: {
      type: "string",
      format: "uuid",
      title: "Id",
    },
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
    is_active: {
      type: "boolean",
      title: "Is Active",
      default: true,
    },
    is_superuser: {
      type: "boolean",
      title: "Is Superuser",
      default: false,
    },
    is_verified: {
      type: "boolean",
      title: "Is Verified",
      default: false,
    },
    role: {
      $ref: "#/components/schemas/UserRole",
    },
    first_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "First Name",
    },
    last_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Last Name",
    },
    settings: {
      type: "object",
      title: "Settings",
    },
  },
  type: "object",
  required: ["id", "email", "role", "settings"],
  title: "UserRead",
} as const

export const $UserRole = {
  type: "string",
  enum: ["basic", "admin"],
  title: "UserRole",
} as const

export const $UserUpdate = {
  properties: {
    password: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Password",
    },
    email: {
      anyOf: [
        {
          type: "string",
          format: "email",
        },
        {
          type: "null",
        },
      ],
      title: "Email",
    },
    is_active: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Active",
    },
    is_superuser: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Superuser",
    },
    is_verified: {
      anyOf: [
        {
          type: "boolean",
        },
        {
          type: "null",
        },
      ],
      title: "Is Verified",
    },
    role: {
      anyOf: [
        {
          $ref: "#/components/schemas/UserRole",
        },
        {
          type: "null",
        },
      ],
    },
    first_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "First Name",
    },
    last_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Last Name",
    },
    settings: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Settings",
    },
  },
  type: "object",
  title: "UserUpdate",
} as const

export const $ValidationError = {
  properties: {
    loc: {
      items: {
        anyOf: [
          {
            type: "string",
          },
          {
            type: "integer",
          },
        ],
      },
      type: "array",
      title: "Location",
    },
    msg: {
      type: "string",
      title: "Message",
    },
    type: {
      type: "string",
      title: "Error Type",
    },
  },
  type: "object",
  required: ["loc", "msg", "type"],
  title: "ValidationError",
} as const

export const $WebhookCreate = {
  properties: {
    status: {
      $ref: "#/components/schemas/WebhookStatus",
      default: "offline",
    },
    method: {
      $ref: "#/components/schemas/WebhookMethod",
      default: "POST",
    },
    entrypoint_ref: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Entrypoint Ref",
    },
  },
  type: "object",
  title: "WebhookCreate",
} as const

export const $WebhookMethod = {
  type: "string",
  enum: ["GET", "POST"],
} as const

export const $WebhookRead = {
  properties: {
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    id: {
      type: "string",
      title: "Id",
    },
    secret: {
      type: "string",
      title: "Secret",
    },
    status: {
      $ref: "#/components/schemas/WebhookStatus",
    },
    entrypoint_ref: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Entrypoint Ref",
    },
    filters: {
      type: "object",
      title: "Filters",
    },
    method: {
      $ref: "#/components/schemas/WebhookMethod",
    },
    workflow_id: {
      type: "string",
      title: "Workflow Id",
    },
    url: {
      type: "string",
      title: "Url",
    },
  },
  type: "object",
  required: [
    "owner_id",
    "id",
    "secret",
    "status",
    "filters",
    "method",
    "workflow_id",
    "url",
  ],
  title: "WebhookRead",
} as const

export const $WebhookStatus = {
  type: "string",
  enum: ["online", "offline"],
} as const

export const $WebhookUpdate = {
  properties: {
    status: {
      anyOf: [
        {
          $ref: "#/components/schemas/WebhookStatus",
        },
        {
          type: "null",
        },
      ],
    },
    method: {
      anyOf: [
        {
          $ref: "#/components/schemas/WebhookMethod",
        },
        {
          type: "null",
        },
      ],
    },
    entrypoint_ref: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Entrypoint Ref",
    },
  },
  type: "object",
  title: "WebhookUpdate",
} as const

export const $WorkflowCommitResponse = {
  properties: {
    workflow_id: {
      type: "string",
      pattern: "wf_[0-9a-zA-Z]+",
      title: "Workflow Id",
    },
    status: {
      type: "string",
      enum: ["success", "failure"],
      title: "Status",
    },
    message: {
      type: "string",
      title: "Message",
    },
    errors: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/RegistryActionValidateResponse",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Errors",
    },
    metadata: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Metadata",
    },
  },
  type: "object",
  required: ["workflow_id", "status", "message"],
  title: "WorkflowCommitResponse",
} as const

export const $WorkflowDefinition = {
  properties: {
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    id: {
      type: "string",
      title: "Id",
    },
    version: {
      type: "integer",
      title: "Version",
      description: "DSL spec version",
    },
    workflow_id: {
      type: "string",
      format: "uuid",
      title: "Workflow Id",
    },
    content: {
      type: "object",
      title: "Content",
    },
  },
  type: "object",
  required: ["owner_id", "version", "workflow_id", "content"],
  title: "WorkflowDefinition",
  description: `A workflow definition.

This is the underlying representation/snapshot of a workflow in the system, which
can directly execute in the runner.

Shoulds
-------
1. Be convertible into a Workspace Workflow + Acitons
2. Be convertible into a YAML DSL
3. Be able to be versioned

Shouldn'ts
----------
1. Have any stateful information

Relationships
-------------
- 1 Workflow to many WorkflowDefinitions`,
} as const

export const $WorkflowEventType = {
  type: "string",
  enum: [
    "WORKFLOW_EXECUTION_STARTED",
    "WORKFLOW_EXECUTION_COMPLETED",
    "WORKFLOW_EXECUTION_FAILED",
    "WORKFLOW_EXECUTION_TERMINATED",
    "WORKFLOW_EXECUTION_CANCELED",
    "WORKFLOW_EXECUTION_CONTINUED_AS_NEW",
    "WORKFLOW_EXECUTION_TIMED_OUT",
    "ACTIVITY_TASK_SCHEDULED",
    "ACTIVITY_TASK_STARTED",
    "ACTIVITY_TASK_COMPLETED",
    "ACTIVITY_TASK_FAILED",
    "ACTIVITY_TASK_TIMED_OUT",
    "ACTIVITY_TASK_CANCELED",
    "CHILD_WORKFLOW_EXECUTION_STARTED",
    "CHILD_WORKFLOW_EXECUTION_COMPLETED",
    "CHILD_WORKFLOW_EXECUTION_FAILED",
    "CHILD_WORKFLOW_EXECUTION_CANCELED",
    "CHILD_WORKFLOW_EXECUTION_TERMINATED",
    "START_CHILD_WORKFLOW_EXECUTION_INITIATED",
    "CHILD_WORKFLOW_EXECUTION_TIMED_OUT",
    "WORKFLOW_EXECUTION_SIGNALED",
    "WORKFLOW_EXECUTION_UPDATE_ACCEPTED",
    "WORKFLOW_EXECUTION_UPDATE_REJECTED",
    "WORKFLOW_EXECUTION_UPDATE_COMPLETED",
  ],
  title: "WorkflowEventType",
  description: "The event types we care about.",
} as const

export const $WorkflowExecutionCreate = {
  properties: {
    workflow_id: {
      anyOf: [
        {
          type: "string",
          pattern: "wf_[0-9a-zA-Z]+",
        },
        {
          type: "string",
          pattern: "wf-[0-9a-f]{32}",
        },
      ],
      title: "Workflow Id",
    },
    inputs: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Inputs",
    },
  },
  type: "object",
  required: ["workflow_id"],
  title: "WorkflowExecutionCreate",
} as const

export const $WorkflowExecutionCreateResponse = {
  properties: {
    message: {
      type: "string",
      title: "Message",
    },
    wf_id: {
      type: "string",
      title: "Wf Id",
    },
    wf_exec_id: {
      type: "string",
      pattern:
        "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
      title: "Wf Exec Id",
    },
  },
  type: "object",
  required: ["message", "wf_id", "wf_exec_id"],
  title: "WorkflowExecutionCreateResponse",
} as const

export const $WorkflowExecutionEvent = {
  properties: {
    event_id: {
      type: "integer",
      title: "Event Id",
    },
    event_time: {
      type: "string",
      format: "date-time",
      title: "Event Time",
    },
    event_type: {
      $ref: "#/components/schemas/WorkflowEventType",
    },
    task_id: {
      type: "integer",
      title: "Task Id",
    },
    event_group: {
      anyOf: [
        {
          $ref: "#/components/schemas/EventGroup",
        },
        {
          type: "null",
        },
      ],
      description:
        "The action group of the event. We use this to keep track of what events are related to each other.",
    },
    failure: {
      anyOf: [
        {
          $ref: "#/components/schemas/EventFailure",
        },
        {
          type: "null",
        },
      ],
    },
    result: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Result",
    },
    role: {
      anyOf: [
        {
          $ref: "#/components/schemas/Role",
        },
        {
          type: "null",
        },
      ],
    },
    parent_wf_exec_id: {
      anyOf: [
        {
          type: "string",
          pattern:
            "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Wf Exec Id",
    },
    workflow_timeout: {
      anyOf: [
        {
          type: "number",
        },
        {
          type: "null",
        },
      ],
      title: "Workflow Timeout",
    },
  },
  type: "object",
  required: ["event_id", "event_time", "event_type", "task_id"],
  title: "WorkflowExecutionEvent",
} as const

export const $WorkflowExecutionEventCompact = {
  properties: {
    source_event_id: {
      type: "integer",
      title: "Source Event Id",
    },
    schedule_time: {
      type: "string",
      format: "date-time",
      title: "Schedule Time",
    },
    start_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Start Time",
    },
    close_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Close Time",
    },
    curr_event_type: {
      $ref: "#/components/schemas/WorkflowEventType",
    },
    status: {
      $ref: "#/components/schemas/WorkflowExecutionEventStatus",
    },
    action_name: {
      type: "string",
      title: "Action Name",
    },
    action_ref: {
      type: "string",
      title: "Action Ref",
    },
    action_input: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Action Input",
    },
    action_result: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Action Result",
    },
    action_error: {
      anyOf: [
        {
          $ref: "#/components/schemas/EventFailure",
        },
        {
          type: "null",
        },
      ],
    },
    child_wf_exec_id: {
      anyOf: [
        {
          type: "string",
          pattern:
            "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
        },
        {
          type: "null",
        },
      ],
      title: "Child Wf Exec Id",
    },
    child_wf_count: {
      type: "integer",
      title: "Child Wf Count",
      default: 0,
    },
    loop_index: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Loop Index",
    },
  },
  type: "object",
  required: [
    "source_event_id",
    "schedule_time",
    "curr_event_type",
    "status",
    "action_name",
    "action_ref",
  ],
  title: "WorkflowExecutionEventCompact",
  description: "A compact representation of a workflow execution event.",
} as const

export const $WorkflowExecutionEventStatus = {
  type: "string",
  enum: [
    "SCHEDULED",
    "STARTED",
    "COMPLETED",
    "FAILED",
    "CANCELED",
    "TERMINATED",
    "TIMED_OUT",
    "UNKNOWN",
  ],
  title: "WorkflowExecutionEventStatus",
} as const

export const $WorkflowExecutionRead = {
  properties: {
    id: {
      type: "string",
      title: "Id",
      description: "The ID of the workflow execution",
    },
    run_id: {
      type: "string",
      title: "Run Id",
      description: "The run ID of the workflow execution",
    },
    start_time: {
      type: "string",
      format: "date-time",
      title: "Start Time",
      description: "The start time of the workflow execution",
    },
    execution_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Execution Time",
      description: "When this workflow run started or should start.",
    },
    close_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Close Time",
      description: "When the workflow was closed if closed.",
    },
    status: {
      type: "string",
      enum: [
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELED",
        "TERMINATED",
        "CONTINUED_AS_NEW",
        "TIMED_OUT",
      ],
    },
    workflow_type: {
      type: "string",
      title: "Workflow Type",
    },
    task_queue: {
      type: "string",
      title: "Task Queue",
    },
    history_length: {
      type: "integer",
      title: "History Length",
      description: "Number of events in the history",
    },
    parent_wf_exec_id: {
      anyOf: [
        {
          type: "string",
          pattern:
            "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Wf Exec Id",
    },
    events: {
      items: {
        $ref: "#/components/schemas/WorkflowExecutionEvent",
      },
      type: "array",
      title: "Events",
      description: "The events in the workflow execution",
    },
    interaction_states: {
      additionalProperties: {
        $ref: "#/components/schemas/InteractionState",
      },
      propertyNames: {
        format: "uuid",
      },
      type: "object",
      title: "Interaction States",
      description: "The interactions in the workflow execution",
    },
  },
  type: "object",
  required: [
    "id",
    "run_id",
    "start_time",
    "status",
    "workflow_type",
    "task_queue",
    "history_length",
    "events",
  ],
  title: "WorkflowExecutionRead",
} as const

export const $WorkflowExecutionReadCompact = {
  properties: {
    id: {
      type: "string",
      title: "Id",
      description: "The ID of the workflow execution",
    },
    run_id: {
      type: "string",
      title: "Run Id",
      description: "The run ID of the workflow execution",
    },
    start_time: {
      type: "string",
      format: "date-time",
      title: "Start Time",
      description: "The start time of the workflow execution",
    },
    execution_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Execution Time",
      description: "When this workflow run started or should start.",
    },
    close_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Close Time",
      description: "When the workflow was closed if closed.",
    },
    status: {
      type: "string",
      enum: [
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELED",
        "TERMINATED",
        "CONTINUED_AS_NEW",
        "TIMED_OUT",
      ],
    },
    workflow_type: {
      type: "string",
      title: "Workflow Type",
    },
    task_queue: {
      type: "string",
      title: "Task Queue",
    },
    history_length: {
      type: "integer",
      title: "History Length",
      description: "Number of events in the history",
    },
    parent_wf_exec_id: {
      anyOf: [
        {
          type: "string",
          pattern:
            "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Wf Exec Id",
    },
    events: {
      items: {
        $ref: "#/components/schemas/WorkflowExecutionEventCompact",
      },
      type: "array",
      title: "Events",
      description: "Compact events in the workflow execution",
    },
    interaction_states: {
      additionalProperties: {
        $ref: "#/components/schemas/InteractionState",
      },
      propertyNames: {
        format: "uuid",
      },
      type: "object",
      title: "Interaction States",
      description: "The interactions in the workflow execution",
    },
  },
  type: "object",
  required: [
    "id",
    "run_id",
    "start_time",
    "status",
    "workflow_type",
    "task_queue",
    "history_length",
    "events",
  ],
  title: "WorkflowExecutionReadCompact",
} as const

export const $WorkflowExecutionReadMinimal = {
  properties: {
    id: {
      type: "string",
      title: "Id",
      description: "The ID of the workflow execution",
    },
    run_id: {
      type: "string",
      title: "Run Id",
      description: "The run ID of the workflow execution",
    },
    start_time: {
      type: "string",
      format: "date-time",
      title: "Start Time",
      description: "The start time of the workflow execution",
    },
    execution_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Execution Time",
      description: "When this workflow run started or should start.",
    },
    close_time: {
      anyOf: [
        {
          type: "string",
          format: "date-time",
        },
        {
          type: "null",
        },
      ],
      title: "Close Time",
      description: "When the workflow was closed if closed.",
    },
    status: {
      type: "string",
      enum: [
        "RUNNING",
        "COMPLETED",
        "FAILED",
        "CANCELED",
        "TERMINATED",
        "CONTINUED_AS_NEW",
        "TIMED_OUT",
      ],
    },
    workflow_type: {
      type: "string",
      title: "Workflow Type",
    },
    task_queue: {
      type: "string",
      title: "Task Queue",
    },
    history_length: {
      type: "integer",
      title: "History Length",
      description: "Number of events in the history",
    },
    parent_wf_exec_id: {
      anyOf: [
        {
          type: "string",
          pattern:
            "(?P<workflow_id>wf-[0-9a-f]{32}|wf_[0-9a-zA-Z]+)[:/](?P<execution_id>(exec_[0-9a-zA-Z]+|exec-[\\w-]+|sch-[0-9a-f]{32}-.*))",
        },
        {
          type: "null",
        },
      ],
      title: "Parent Wf Exec Id",
    },
  },
  type: "object",
  required: [
    "id",
    "run_id",
    "start_time",
    "status",
    "workflow_type",
    "task_queue",
    "history_length",
  ],
  title: "WorkflowExecutionReadMinimal",
} as const

export const $WorkflowExecutionTerminate = {
  properties: {
    reason: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Reason",
    },
  },
  type: "object",
  title: "WorkflowExecutionTerminate",
} as const

export const $WorkflowRead = {
  properties: {
    id: {
      type: "string",
      pattern: "wf_[0-9a-zA-Z]+",
      title: "Id",
    },
    title: {
      type: "string",
      title: "Title",
    },
    description: {
      type: "string",
      title: "Description",
    },
    status: {
      type: "string",
      title: "Status",
    },
    actions: {
      additionalProperties: {
        $ref: "#/components/schemas/ActionRead",
      },
      type: "object",
      title: "Actions",
    },
    object: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Object",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    version: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Version",
    },
    webhook: {
      $ref: "#/components/schemas/WebhookRead",
    },
    schedules: {
      items: {
        $ref: "#/components/schemas/Schedule",
      },
      type: "array",
      title: "Schedules",
    },
    entrypoint: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Entrypoint",
    },
    static_inputs: {
      type: "object",
      title: "Static Inputs",
    },
    expects: {
      anyOf: [
        {
          additionalProperties: {
            $ref: "#/components/schemas/ExpectedField",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Expects",
    },
    returns: {
      title: "Returns",
    },
    config: {
      anyOf: [
        {
          $ref: "#/components/schemas/DSLConfig-Output",
        },
        {
          type: "null",
        },
      ],
    },
    alias: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Alias",
    },
    error_handler: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Error Handler",
    },
  },
  type: "object",
  required: [
    "id",
    "title",
    "description",
    "status",
    "actions",
    "object",
    "owner_id",
    "webhook",
    "schedules",
    "entrypoint",
    "static_inputs",
    "returns",
    "config",
  ],
  title: "WorkflowRead",
} as const

export const $WorkflowReadMinimal = {
  properties: {
    id: {
      type: "string",
      pattern: "wf_[0-9a-zA-Z]+",
      title: "Id",
    },
    title: {
      type: "string",
      title: "Title",
    },
    description: {
      type: "string",
      title: "Description",
    },
    status: {
      type: "string",
      title: "Status",
    },
    icon_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Icon Url",
    },
    created_at: {
      type: "string",
      format: "date-time",
      title: "Created At",
    },
    updated_at: {
      type: "string",
      format: "date-time",
      title: "Updated At",
    },
    version: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Version",
    },
    tags: {
      anyOf: [
        {
          items: {
            $ref: "#/components/schemas/TagRead",
          },
          type: "array",
        },
        {
          type: "null",
        },
      ],
      title: "Tags",
    },
    alias: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Alias",
    },
    error_handler: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Error Handler",
    },
  },
  type: "object",
  required: [
    "id",
    "title",
    "description",
    "status",
    "icon_url",
    "created_at",
    "updated_at",
    "version",
  ],
  title: "WorkflowReadMinimal",
} as const

export const $WorkflowTagCreate = {
  properties: {
    tag_id: {
      type: "string",
      format: "uuid4",
      title: "Tag Id",
    },
  },
  type: "object",
  required: ["tag_id"],
  title: "WorkflowTagCreate",
} as const

export const $WorkflowUpdate = {
  properties: {
    title: {
      anyOf: [
        {
          type: "string",
          maxLength: 100,
          minLength: 3,
        },
        {
          type: "null",
        },
      ],
      title: "Title",
      description: "Workflow title, between 3 and 100 characters",
    },
    description: {
      anyOf: [
        {
          type: "string",
          maxLength: 1000,
        },
        {
          type: "null",
        },
      ],
      title: "Description",
      description: "Optional workflow description, up to 1000 characters",
    },
    status: {
      anyOf: [
        {
          type: "string",
          enum: ["online", "offline"],
        },
        {
          type: "null",
        },
      ],
      title: "Status",
    },
    object: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Object",
    },
    version: {
      anyOf: [
        {
          type: "integer",
        },
        {
          type: "null",
        },
      ],
      title: "Version",
    },
    entrypoint: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Entrypoint",
    },
    icon_url: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Icon Url",
    },
    static_inputs: {
      anyOf: [
        {
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Static Inputs",
    },
    expects: {
      anyOf: [
        {
          additionalProperties: {
            $ref: "#/components/schemas/ExpectedField",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Expects",
    },
    returns: {
      anyOf: [
        {},
        {
          type: "null",
        },
      ],
      title: "Returns",
    },
    config: {
      anyOf: [
        {
          $ref: "#/components/schemas/DSLConfig-Input",
        },
        {
          type: "null",
        },
      ],
    },
    alias: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Alias",
    },
    error_handler: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Error Handler",
    },
  },
  type: "object",
  title: "WorkflowUpdate",
} as const

export const $WorkspaceMember = {
  properties: {
    user_id: {
      type: "string",
      format: "uuid4",
      title: "User Id",
    },
    first_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "First Name",
    },
    last_name: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Last Name",
    },
    email: {
      type: "string",
      format: "email",
      title: "Email",
    },
    role: {
      $ref: "#/components/schemas/UserRole",
    },
  },
  type: "object",
  required: ["user_id", "first_name", "last_name", "email", "role"],
  title: "WorkspaceMember",
} as const

export const $WorkspaceMembershipResponse = {
  properties: {
    user_id: {
      type: "string",
      format: "uuid4",
      title: "User Id",
    },
    workspace_id: {
      type: "string",
      format: "uuid4",
      title: "Workspace Id",
    },
  },
  type: "object",
  required: ["user_id", "workspace_id"],
  title: "WorkspaceMembershipResponse",
} as const

export const $WorkspaceMetadataResponse = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    n_members: {
      type: "integer",
      title: "N Members",
    },
  },
  type: "object",
  required: ["id", "name", "n_members"],
  title: "WorkspaceMetadataResponse",
} as const

export const $WorkspaceResponse = {
  properties: {
    id: {
      type: "string",
      format: "uuid4",
      title: "Id",
    },
    name: {
      type: "string",
      title: "Name",
    },
    settings: {
      anyOf: [
        {
          additionalProperties: {
            type: "string",
          },
          type: "object",
        },
        {
          type: "null",
        },
      ],
      title: "Settings",
    },
    owner_id: {
      type: "string",
      format: "uuid",
      title: "Owner Id",
    },
    n_members: {
      type: "integer",
      title: "N Members",
    },
    members: {
      items: {
        $ref: "#/components/schemas/WorkspaceMember",
      },
      type: "array",
      title: "Members",
    },
  },
  type: "object",
  required: ["id", "name", "owner_id", "n_members", "members"],
  title: "WorkspaceResponse",
} as const

export const $login = {
  properties: {
    grant_type: {
      anyOf: [
        {
          type: "string",
          pattern: "password",
        },
        {
          type: "null",
        },
      ],
      title: "Grant Type",
    },
    username: {
      type: "string",
      title: "Username",
    },
    password: {
      type: "string",
      title: "Password",
    },
    scope: {
      type: "string",
      title: "Scope",
      default: "",
    },
    client_id: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Client Id",
    },
    client_secret: {
      anyOf: [
        {
          type: "string",
        },
        {
          type: "null",
        },
      ],
      title: "Client Secret",
    },
  },
  type: "object",
  required: ["username", "password"],
  title: "Body_auth-auth:database.login",
} as const
