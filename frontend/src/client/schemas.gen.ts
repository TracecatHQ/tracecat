// This file is auto-generated by @hey-api/openapi-ts

export const $AccessLevel = {
    type: 'integer',
    enum: [0, 999],
    title: 'AccessLevel',
    description: 'Access control levels for roles.'
} as const;

export const $ActionControlFlow = {
    properties: {
        run_if: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Run If'
        },
        for_each: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'For Each'
        }
    },
    type: 'object',
    title: 'ActionControlFlow'
} as const;

export const $ActionMetadataResponse = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        workflow_id: {
            type: 'string',
            title: 'Workflow Id'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        key: {
            type: 'string',
            title: 'Key'
        }
    },
    type: 'object',
    required: ['id', 'workflow_id', 'type', 'title', 'description', 'status', 'key'],
    title: 'ActionMetadataResponse'
} as const;

export const $ActionResponse = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        inputs: {
            type: 'object',
            title: 'Inputs'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        control_flow: {
            '$ref': '#/components/schemas/ActionControlFlow'
        }
    },
    type: 'object',
    required: ['id', 'type', 'title', 'description', 'status', 'inputs', 'key'],
    title: 'ActionResponse'
} as const;

export const $ActionStatement = {
    properties: {
        ref: {
            type: 'string',
            pattern: '^[a-z0-9_]+$',
            title: 'Ref',
            description: 'Unique reference for the task'
        },
        description: {
            type: 'string',
            title: 'Description',
            default: ''
        },
        action: {
            type: 'string',
            pattern: '^[a-z0-9_.]+$',
            title: 'Action',
            description: 'Action type. Equivalent to the UDF key.'
        },
        args: {
            type: 'object',
            title: 'Args',
            description: 'Arguments for the action'
        },
        depends_on: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Depends On',
            description: 'Task dependencies'
        },
        run_if: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Run If',
            description: 'Condition to run the task'
        },
        for_each: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'For Each',
            description: 'Iterate over a list of items and run the task for each item.'
        }
    },
    type: 'object',
    required: ['ref', 'action'],
    title: 'ActionStatement'
} as const;

export const $ActionTest = {
    properties: {
        ref: {
            type: 'string',
            pattern: '^[a-z0-9_]+$',
            title: 'Ref',
            description: 'Action reference'
        },
        enable: {
            type: 'boolean',
            title: 'Enable',
            default: true
        },
        validate_args: {
            type: 'boolean',
            title: 'Validate Args',
            default: true
        },
        success: {
            title: 'Success',
            description: "Patched success output. This can be any data structure.If it's a fsspec file, it will be read and the contents will be used."
        },
        failure: {
            title: 'Failure',
            description: 'Patched failure output'
        }
    },
    type: 'object',
    required: ['ref', 'success'],
    title: 'ActionTest'
} as const;

export const $Body_auth_reset_forgot_password = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_auth-reset:forgot_password'
} as const;

export const $Body_auth_reset_reset_password = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        password: {
            type: 'string',
            title: 'Password'
        }
    },
    type: 'object',
    required: ['token', 'password'],
    title: 'Body_auth-reset:reset_password'
} as const;

export const $Body_auth_verify_request_token = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        }
    },
    type: 'object',
    required: ['email'],
    title: 'Body_auth-verify:request-token'
} as const;

export const $Body_auth_verify_verify = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        }
    },
    type: 'object',
    required: ['token'],
    title: 'Body_auth-verify:verify'
} as const;

export const $Body_validation_validate_workflow = {
    properties: {
        definition: {
            type: 'string',
            format: 'binary',
            title: 'Definition'
        },
        payload: {
            type: 'string',
            format: 'binary',
            title: 'Payload'
        }
    },
    type: 'object',
    required: ['definition'],
    title: 'Body_validation-validate_workflow'
} as const;

export const $Body_workflows_create_workflow = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        file: {
            anyOf: [
                {
                    type: 'string',
                    format: 'binary'
                },
                {
                    type: 'null'
                }
            ],
            title: 'File'
        }
    },
    type: 'object',
    title: 'Body_workflows-create_workflow'
} as const;

export const $CaseAction = {
    properties: {
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        tag: {
            type: 'string',
            title: 'Tag'
        },
        value: {
            type: 'string',
            title: 'Value'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid4'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        }
    },
    type: 'object',
    required: ['owner_id', 'created_at', 'updated_at', 'tag', 'value', 'user_id'],
    title: 'CaseAction'
} as const;

export const $CaseActionParams = {
    properties: {
        tag: {
            type: 'string',
            title: 'Tag'
        },
        value: {
            type: 'string',
            title: 'Value'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        }
    },
    type: 'object',
    required: ['tag', 'value'],
    title: 'CaseActionParams'
} as const;

export const $CaseContext_Input = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        value: {
            type: 'string',
            title: 'Value'
        }
    },
    type: 'object',
    required: ['key', 'value'],
    title: 'CaseContext'
} as const;

export const $CaseContextParams = {
    properties: {
        tag: {
            type: 'string',
            title: 'Tag'
        },
        value: {
            type: 'string',
            title: 'Value'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        }
    },
    type: 'object',
    required: ['tag', 'value'],
    title: 'CaseContextParams'
} as const;

export const $CaseEvent = {
    properties: {
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        workflow_id: {
            type: 'string',
            title: 'Workflow Id'
        },
        case_id: {
            type: 'string',
            title: 'Case Id'
        },
        initiator_role: {
            type: 'string',
            title: 'Initiator Role'
        },
        data: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'null'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        }
    },
    type: 'object',
    required: ['owner_id', 'created_at', 'updated_at', 'type', 'workflow_id', 'case_id', 'initiator_role', 'data'],
    title: 'CaseEvent'
} as const;

export const $CaseEventParams = {
    properties: {
        type: {
            type: 'string',
            enum: ['status_changed', 'priority_changed', 'comment_created', 'case_opened', 'case_closed'],
            title: 'Type'
        },
        data: {
            anyOf: [
                {
                    additionalProperties: {
                        anyOf: [
                            {
                                type: 'string'
                            },
                            {
                                type: 'null'
                            }
                        ]
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Data'
        }
    },
    type: 'object',
    required: ['type', 'data'],
    title: 'CaseEventParams'
} as const;

export const $CaseParams = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        workflow_id: {
            type: 'string',
            title: 'Workflow Id'
        },
        case_title: {
            type: 'string',
            title: 'Case Title'
        },
        payload: {
            type: 'object',
            title: 'Payload'
        },
        malice: {
            type: 'string',
            enum: ['malicious', 'benign'],
            title: 'Malice'
        },
        status: {
            type: 'string',
            enum: ['open', 'closed', 'in_progress', 'reported', 'escalated'],
            title: 'Status'
        },
        priority: {
            type: 'string',
            enum: ['low', 'medium', 'high', 'critical'],
            title: 'Priority'
        },
        action: {
            type: 'string',
            enum: ['ignore', 'quarantine', 'informational', 'sinkhole', 'active_compromise'],
            title: 'Action'
        },
        context: {
            items: {
                '$ref': '#/components/schemas/CaseContext-Input'
            },
            type: 'array',
            title: 'Context'
        },
        tags: {
            items: {
                '$ref': '#/components/schemas/Tag'
            },
            type: 'array',
            title: 'Tags'
        }
    },
    type: 'object',
    required: ['id', 'owner_id', 'created_at', 'updated_at', 'workflow_id', 'case_title', 'payload', 'malice', 'status', 'priority', 'action', 'context', 'tags'],
    title: 'CaseParams'
} as const;

export const $CaseResponse = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        workflow_id: {
            type: 'string',
            title: 'Workflow Id'
        },
        case_title: {
            type: 'string',
            title: 'Case Title'
        },
        payload: {
            type: 'object',
            title: 'Payload'
        },
        malice: {
            type: 'string',
            enum: ['malicious', 'benign'],
            title: 'Malice'
        },
        status: {
            type: 'string',
            enum: ['open', 'closed', 'in_progress', 'reported', 'escalated'],
            title: 'Status'
        },
        priority: {
            type: 'string',
            enum: ['low', 'medium', 'high', 'critical'],
            title: 'Priority'
        },
        action: {
            type: 'string',
            enum: ['ignore', 'quarantine', 'informational', 'sinkhole', 'active_compromise'],
            title: 'Action'
        },
        context: {
            items: {
                '$ref': '#/components/schemas/tracecat__types__api__CaseContext'
            },
            type: 'array',
            title: 'Context'
        },
        tags: {
            items: {
                '$ref': '#/components/schemas/Tag'
            },
            type: 'array',
            title: 'Tags'
        }
    },
    type: 'object',
    required: ['id', 'owner_id', 'created_at', 'updated_at', 'workflow_id', 'case_title', 'payload', 'malice', 'status', 'priority', 'action', 'context', 'tags'],
    title: 'CaseResponse'
} as const;

export const $CommitWorkflowResponse = {
    properties: {
        workflow_id: {
            type: 'string',
            title: 'Workflow Id'
        },
        status: {
            type: 'string',
            enum: ['success', 'failure'],
            title: 'Status'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        errors: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/UDFArgsValidationResponse'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Errors'
        },
        metadata: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Metadata'
        }
    },
    type: 'object',
    required: ['workflow_id', 'status', 'message'],
    title: 'CommitWorkflowResponse'
} as const;

export const $CreateActionParams = {
    properties: {
        workflow_id: {
            type: 'string',
            title: 'Workflow Id'
        },
        type: {
            type: 'string',
            title: 'Type'
        },
        title: {
            type: 'string',
            title: 'Title'
        }
    },
    type: 'object',
    required: ['workflow_id', 'type', 'title'],
    title: 'CreateActionParams'
} as const;

export const $CreateScheduleParams = {
    properties: {
        workflow_id: {
            type: 'string',
            pattern: 'wf-[0-9a-f]{32}',
            title: 'Workflow Id'
        },
        inputs: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Inputs'
        },
        cron: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cron'
        },
        every: {
            type: 'string',
            format: 'duration',
            title: 'Every',
            description: 'ISO 8601 duration string'
        },
        offset: {
            anyOf: [
                {
                    type: 'string',
                    format: 'duration'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Offset',
            description: 'ISO 8601 duration string'
        },
        start_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start At',
            description: 'ISO 8601 datetime string'
        },
        end_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End At',
            description: 'ISO 8601 datetime string'
        },
        status: {
            type: 'string',
            enum: ['online', 'offline'],
            title: 'Status',
            default: 'online'
        }
    },
    type: 'object',
    required: ['workflow_id', 'every'],
    title: 'CreateScheduleParams'
} as const;

export const $CreateSecretParams = {
    properties: {
        type: {
            const: 'custom',
            title: 'Type',
            default: 'custom'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        keys: {
            items: {
                '$ref': '#/components/schemas/SecretKeyValue'
            },
            type: 'array',
            title: 'Keys'
        },
        tags: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        }
    },
    type: 'object',
    required: ['name', 'keys'],
    title: 'CreateSecretParams',
    description: `Create a new secret.

Secret types
------------
- \`custom\`: Arbitrary user-defined types
- \`token\`: A token, e.g. API Key, JWT Token (TBC)
- \`oauth2\`: OAuth2 Client Credentials (TBC)`
} as const;

export const $CreateWorkflowExecutionParams = {
    properties: {
        workflow_id: {
            type: 'string',
            pattern: 'wf-[0-9a-f]{32}',
            title: 'Workflow Id'
        },
        inputs: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Inputs'
        },
        enable_runtime_tests: {
            type: 'boolean',
            title: 'Enable Runtime Tests',
            default: false
        }
    },
    type: 'object',
    required: ['workflow_id'],
    title: 'CreateWorkflowExecutionParams'
} as const;

export const $CreateWorkflowExecutionResponse = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        wf_id: {
            type: 'string',
            pattern: 'wf-[0-9a-f]{32}',
            title: 'Wf Id'
        },
        wf_exec_id: {
            type: 'string',
            pattern: 'wf-[0-9a-f]{32}:exec-[\\w-]+',
            title: 'Wf Exec Id'
        }
    },
    type: 'object',
    required: ['message', 'wf_id', 'wf_exec_id'],
    title: 'CreateWorkflowExecutionResponse'
} as const;

export const $CreateWorkspaceMembershipParams = {
    properties: {
        user_id: {
            type: 'string',
            format: 'uuid4',
            title: 'User Id'
        }
    },
    type: 'object',
    required: ['user_id'],
    title: 'CreateWorkspaceMembershipParams'
} as const;

export const $CreateWorkspaceParams = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        settings: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Settings'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id',
            default: '00000000-0000-0000-0000-000000000000'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'CreateWorkspaceParams'
} as const;

export const $DSLConfig = {
    properties: {
        scheduler: {
            type: 'string',
            enum: ['static', 'dynamic'],
            title: 'Scheduler',
            default: 'dynamic'
        },
        enable_runtime_tests: {
            type: 'boolean',
            title: 'Enable Runtime Tests',
            description: 'Enable runtime action tests. This is dynamically set on workflow entry.',
            default: false
        }
    },
    type: 'object',
    title: 'DSLConfig'
} as const;

export const $DSLEntrypoint = {
    properties: {
        ref: {
            type: 'string',
            title: 'Ref',
            description: 'The entrypoint action ref'
        },
        expects: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Expects',
            description: 'Expected trigger input shape'
        }
    },
    type: 'object',
    required: ['ref'],
    title: 'DSLEntrypoint'
} as const;

export const $DSLInput = {
    properties: {
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        entrypoint: {
            '$ref': '#/components/schemas/DSLEntrypoint'
        },
        actions: {
            items: {
                '$ref': '#/components/schemas/ActionStatement'
            },
            type: 'array',
            title: 'Actions'
        },
        config: {
            '$ref': '#/components/schemas/DSLConfig'
        },
        triggers: {
            items: {
                '$ref': '#/components/schemas/Trigger'
            },
            type: 'array',
            title: 'Triggers'
        },
        inputs: {
            type: 'object',
            title: 'Inputs',
            description: 'Static input parameters'
        },
        tests: {
            items: {
                '$ref': '#/components/schemas/ActionTest'
            },
            type: 'array',
            title: 'Tests',
            description: 'Action tests'
        },
        returns: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Returns',
            description: 'The action ref or value to return.'
        }
    },
    type: 'object',
    required: ['title', 'description', 'entrypoint', 'actions'],
    title: 'DSLInput',
    description: `DSL definition for a workflow.

The difference between this and a normal workflow engine is that here,
our workflow execution order is defined by the DSL itself, independent
of a workflow scheduler.

With a traditional
This allows the execution of the workflow to be fully deterministic.`
} as const;

export const $DSLRunArgs = {
    properties: {
        role: {
            '$ref': '#/components/schemas/Role'
        },
        dsl: {
            '$ref': '#/components/schemas/DSLInput'
        },
        wf_id: {
            type: 'string',
            pattern: 'wf-[0-9a-f]{32}',
            title: 'Wf Id'
        },
        trigger_inputs: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Trigger Inputs'
        },
        parent_run_context: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/RunContext'
                },
                {
                    type: 'null'
                }
            ]
        },
        run_config: {
            type: 'object',
            title: 'Run Config'
        }
    },
    type: 'object',
    required: ['role', 'dsl', 'wf_id'],
    title: 'DSLRunArgs'
} as const;

export const $ErrorModel = {
    properties: {
        detail: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                }
            ],
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['detail'],
    title: 'ErrorModel'
} as const;

export const $EventFailure = {
    properties: {
        message: {
            type: 'string',
            title: 'Message'
        },
        stack_trace: {
            type: 'string',
            title: 'Stack Trace'
        },
        cause: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cause'
        },
        application_failure_info: {
            type: 'object',
            title: 'Application Failure Info'
        }
    },
    type: 'object',
    required: ['message', 'stack_trace'],
    title: 'EventFailure'
} as const;

export const $EventGroup = {
    properties: {
        event_id: {
            type: 'integer',
            title: 'Event Id'
        },
        udf_namespace: {
            type: 'string',
            title: 'Udf Namespace'
        },
        udf_name: {
            type: 'string',
            title: 'Udf Name'
        },
        udf_key: {
            type: 'string',
            title: 'Udf Key'
        },
        action_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Action Id'
        },
        action_ref: {
            type: 'string',
            title: 'Action Ref'
        },
        action_title: {
            type: 'string',
            title: 'Action Title'
        },
        action_description: {
            type: 'string',
            title: 'Action Description'
        },
        action_input: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UDFActionInput'
                },
                {
                    '$ref': '#/components/schemas/DSLRunArgs'
                },
                {
                    '$ref': '#/components/schemas/GetWorkflowDefinitionActivityInputs'
                }
            ],
            title: 'Action Input'
        },
        action_result: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Action Result'
        }
    },
    type: 'object',
    required: ['event_id', 'udf_namespace', 'udf_name', 'udf_key', 'action_id', 'action_ref', 'action_title', 'action_description', 'action_input'],
    title: 'EventGroup'
} as const;

export const $EventHistoryResponse = {
    properties: {
        event_id: {
            type: 'integer',
            title: 'Event Id'
        },
        event_time: {
            type: 'string',
            format: 'date-time',
            title: 'Event Time'
        },
        event_type: {
            '$ref': '#/components/schemas/EventHistoryType'
        },
        task_id: {
            type: 'integer',
            title: 'Task Id'
        },
        event_group: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventGroup'
                },
                {
                    type: 'null'
                }
            ],
            description: 'The action group of the event. We use this to keep track of what events are related to each other.'
        },
        failure: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/EventFailure'
                },
                {
                    type: 'null'
                }
            ]
        },
        result: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Result'
        },
        role: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Role'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['event_id', 'event_time', 'event_type', 'task_id'],
    title: 'EventHistoryResponse'
} as const;

export const $EventHistoryType = {
    type: 'string',
    enum: ['WORKFLOW_EXECUTION_STARTED', 'WORKFLOW_EXECUTION_COMPLETED', 'WORKFLOW_EXECUTION_FAILED', 'WORKFLOW_EXECUTION_TERMINATED', 'WORKFLOW_EXECUTION_CANCELED', 'ACTIVITY_TASK_SCHEDULED', 'ACTIVITY_TASK_STARTED', 'ACTIVITY_TASK_COMPLETED', 'ACTIVITY_TASK_FAILED', 'CHILD_WORKFLOW_EXECUTION_STARTED', 'CHILD_WORKFLOW_EXECUTION_COMPLETED', 'CHILD_WORKFLOW_EXECUTION_FAILED', 'START_CHILD_WORKFLOW_EXECUTION_INITIATED'],
    title: 'EventHistoryType',
    description: 'The event types we care about.'
} as const;

export const $ExprContext = {
    type: 'string',
    enum: ['ACTIONS', 'SECRETS', 'FN', 'INPUTS', 'ENV', 'TRIGGER', 'var'],
    title: 'ExprContext'
} as const;

export const $GetWorkflowDefinitionActivityInputs = {
    properties: {
        role: {
            '$ref': '#/components/schemas/Role'
        },
        task: {
            '$ref': '#/components/schemas/ActionStatement'
        },
        workflow_id: {
            type: 'string',
            pattern: 'wf-[0-9a-f]{32}',
            title: 'Workflow Id'
        },
        trigger_inputs: {
            type: 'object',
            title: 'Trigger Inputs'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        run_context: {
            '$ref': '#/components/schemas/RunContext'
        }
    },
    type: 'object',
    required: ['role', 'task', 'workflow_id', 'trigger_inputs', 'run_context'],
    title: 'GetWorkflowDefinitionActivityInputs'
} as const;

export const $HTTPValidationError = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const $OAuth2AuthorizeResponse = {
    properties: {
        authorization_url: {
            type: 'string',
            title: 'Authorization Url'
        }
    },
    type: 'object',
    required: ['authorization_url'],
    title: 'OAuth2AuthorizeResponse'
} as const;

export const $Role = {
    properties: {
        type: {
            type: 'string',
            enum: ['user', 'service'],
            title: 'Type'
        },
        workspace_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid4'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Workspace Id'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid4'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        },
        access_level: {
            allOf: [
                {
                    '$ref': '#/components/schemas/AccessLevel'
                }
            ],
            default: 0
        },
        service_id: {
            type: 'string',
            enum: ['tracecat-runner', 'tracecat-api', 'tracecat-cli', 'tracecat-schedule-runner', 'tracecat-service'],
            title: 'Service Id'
        }
    },
    type: 'object',
    required: ['type', 'service_id'],
    title: 'Role',
    description: `The identity and authorization of a user or service.

Params
------
type : Literal["user", "service"]
    The type of role.
user_id : UUID | None
    The user's ID, or the service's user_id.
    This can be None for internal services, or when a user hasn't been set for the role.
service_id : str | None = None
    The service's role name, or None if the role is a user.


User roles
----------
- User roles are authenticated via JWT.
- The \`user_id\` is the user's JWT 'sub' claim.
- User roles do not have an associated \`service_id\`, this must be None.

Service roles
-------------
- Service roles are authenticated via API key.
- Used for internal services to authenticate with the API.
- A service's \`user_id\` is the user it's acting on behalf of. This can be None for internal services.`
} as const;

export const $RunContext = {
    properties: {
        wf_id: {
            type: 'string',
            pattern: 'wf-[0-9a-f]{32}',
            title: 'Wf Id'
        },
        wf_exec_id: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'wf-[0-9a-f]{32}:exec-[\\w-]+'
                },
                {
                    type: 'string',
                    pattern: 'wf-[0-9a-f]{32}:sch-[0-9a-f]{32}-.*'
                }
            ],
            title: 'Wf Exec Id'
        },
        wf_run_id: {
            type: 'string',
            format: 'uuid4',
            title: 'Wf Run Id'
        }
    },
    type: 'object',
    required: ['wf_id', 'wf_exec_id', 'wf_run_id'],
    title: 'RunContext'
} as const;

export const $Schedule = {
    properties: {
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        status: {
            type: 'string',
            title: 'Status',
            default: 'online'
        },
        cron: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cron'
        },
        inputs: {
            type: 'object',
            title: 'Inputs'
        },
        every: {
            type: 'string',
            format: 'duration',
            title: 'Every',
            description: 'ISO 8601 duration string'
        },
        offset: {
            anyOf: [
                {
                    type: 'string',
                    format: 'duration'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Offset',
            description: 'ISO 8601 duration string'
        },
        start_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start At',
            description: 'ISO 8601 datetime string'
        },
        end_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End At',
            description: 'ISO 8601 datetime string'
        },
        workflow_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Workflow Id'
        }
    },
    type: 'object',
    required: ['owner_id', 'created_at', 'updated_at', 'every', 'workflow_id'],
    title: 'Schedule'
} as const;

export const $SearchScheduleParams = {
    properties: {
        workflow_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Workflow Id'
        },
        limit: {
            type: 'integer',
            title: 'Limit',
            default: 100
        },
        order_by: {
            type: 'string',
            title: 'Order By',
            default: 'created_at'
        },
        query: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Query'
        },
        group_by: {
            anyOf: [
                {
                    items: {
                        type: 'string'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Group By'
        },
        agg: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Agg'
        }
    },
    type: 'object',
    title: 'SearchScheduleParams'
} as const;

export const $SearchSecretsParams = {
    properties: {
        names: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Names'
        }
    },
    type: 'object',
    required: ['names'],
    title: 'SearchSecretsParams'
} as const;

export const $Secret = {
    properties: {
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        type: {
            type: 'string',
            title: 'Type',
            default: 'custom'
        },
        name: {
            type: 'string',
            maxLength: 255,
            title: 'Name',
            description: "Secret names should be unique within a user's scope."
        },
        description: {
            anyOf: [
                {
                    type: 'string',
                    maxLength: 255
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        encrypted_keys: {
            type: 'string',
            format: 'binary',
            title: 'Encrypted Keys'
        },
        tags: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        }
    },
    type: 'object',
    required: ['owner_id', 'created_at', 'updated_at', 'name', 'encrypted_keys', 'tags'],
    title: 'Secret'
} as const;

export const $SecretKeyValue = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        value: {
            type: 'string',
            format: 'password',
            title: 'Value',
            writeOnly: true
        }
    },
    type: 'object',
    required: ['key', 'value'],
    title: 'SecretKeyValue'
} as const;

export const $SecretResponse = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        type: {
            const: 'custom',
            title: 'Type'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        keys: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Keys'
        }
    },
    type: 'object',
    required: ['id', 'type', 'name', 'keys'],
    title: 'SecretResponse'
} as const;

export const $Tag = {
    properties: {
        tag: {
            type: 'string',
            title: 'Tag'
        },
        value: {
            type: 'string',
            title: 'Value'
        }
    },
    type: 'object',
    required: ['tag', 'value'],
    title: 'Tag'
} as const;

export const $TerminateWorkflowExecutionParams = {
    properties: {
        reason: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Reason'
        }
    },
    type: 'object',
    title: 'TerminateWorkflowExecutionParams'
} as const;

export const $Trigger = {
    properties: {
        type: {
            type: 'string',
            enum: ['schedule', 'webhook'],
            title: 'Type'
        },
        ref: {
            type: 'string',
            pattern: '^[a-z0-9_]+$',
            title: 'Ref'
        },
        args: {
            type: 'object',
            title: 'Args'
        }
    },
    type: 'object',
    required: ['type', 'ref'],
    title: 'Trigger'
} as const;

export const $UDFActionInput = {
    properties: {
        task: {
            '$ref': '#/components/schemas/ActionStatement'
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        exec_context: {
            additionalProperties: {
                type: 'object'
            },
            type: 'object',
            title: 'Exec Context'
        },
        run_context: {
            '$ref': '#/components/schemas/RunContext'
        },
        action_test: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ActionTest'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    required: ['task', 'role', 'exec_context', 'run_context'],
    title: 'UDFActionInput'
} as const;

export const $UDFArgsValidationResponse = {
    properties: {
        ok: {
            type: 'boolean',
            title: 'Ok'
        },
        message: {
            type: 'string',
            title: 'Message'
        },
        detail: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Detail'
        }
    },
    type: 'object',
    required: ['ok', 'message'],
    title: 'UDFArgsValidationResponse'
} as const;

export const $UDFSpec = {
    properties: {
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        namespace: {
            type: 'string',
            title: 'Namespace'
        },
        key: {
            type: 'string',
            title: 'Key'
        },
        version: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        json_schema: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Json Schema'
        },
        meta: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Meta'
        }
    },
    type: 'object',
    required: ['owner_id', 'created_at', 'updated_at', 'description', 'namespace', 'key', 'json_schema', 'meta'],
    title: 'UDFSpec',
    description: `UDF spec.

Used in:
1. Frontend action library
2. Frontend integration action form`
} as const;

export const $UpdateActionParams = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        inputs: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Inputs'
        },
        control_flow: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/ActionControlFlow'
                },
                {
                    type: 'null'
                }
            ]
        }
    },
    type: 'object',
    title: 'UpdateActionParams'
} as const;

export const $UpdateScheduleParams = {
    properties: {
        inputs: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Inputs'
        },
        cron: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Cron'
        },
        every: {
            anyOf: [
                {
                    type: 'string',
                    format: 'duration'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Every',
            description: 'ISO 8601 duration string'
        },
        offset: {
            anyOf: [
                {
                    type: 'string',
                    format: 'duration'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Offset',
            description: 'ISO 8601 duration string'
        },
        start_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start At',
            description: 'ISO 8601 datetime string'
        },
        end_at: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End At',
            description: 'ISO 8601 datetime string'
        },
        status: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['online', 'offline']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        }
    },
    type: 'object',
    title: 'UpdateScheduleParams'
} as const;

export const $UpdateSecretParams = {
    properties: {
        type: {
            anyOf: [
                {
                    const: 'custom'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Type'
        },
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        keys: {
            anyOf: [
                {
                    items: {
                        '$ref': '#/components/schemas/SecretKeyValue'
                    },
                    type: 'array'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Keys'
        },
        tags: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Tags'
        }
    },
    type: 'object',
    title: 'UpdateSecretParams',
    description: `Create a new secret.

Secret types
------------
- \`custom\`: Arbitrary user-defined types
- \`token\`: A token, e.g. API Key, JWT Token (TBC)
- \`oauth2\`: OAuth2 Client Credentials (TBC)`
} as const;

export const $UpdateWorkflowParams = {
    properties: {
        title: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Title'
        },
        description: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Description'
        },
        status: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['online', 'offline']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        object: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Object'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        entrypoint: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entrypoint'
        },
        icon_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Url'
        },
        static_inputs: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Static Inputs'
        },
        returns: {
            anyOf: [
                {},
                {
                    type: 'null'
                }
            ],
            title: 'Returns'
        }
    },
    type: 'object',
    title: 'UpdateWorkflowParams'
} as const;

export const $UpdateWorkspaceParams = {
    properties: {
        name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Name'
        },
        settings: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Settings'
        }
    },
    type: 'object',
    title: 'UpdateWorkspaceParams'
} as const;

export const $UpsertWebhookParams = {
    properties: {
        status: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['online', 'offline']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Status'
        },
        entrypoint_ref: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entrypoint Ref'
        },
        method: {
            anyOf: [
                {
                    type: 'string',
                    enum: ['GET', 'POST']
                },
                {
                    type: 'null'
                }
            ],
            title: 'Method'
        }
    },
    type: 'object',
    title: 'UpsertWebhookParams'
} as const;

export const $UserCreate = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser',
            default: false
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified',
            default: false
        },
        role: {
            allOf: [
                {
                    '$ref': '#/components/schemas/UserRole'
                }
            ],
            default: 'basic'
        },
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        }
    },
    type: 'object',
    required: ['email', 'password'],
    title: 'UserCreate'
} as const;

export const $UserRead = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid',
            title: 'Id'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        is_active: {
            type: 'boolean',
            title: 'Is Active',
            default: true
        },
        is_superuser: {
            type: 'boolean',
            title: 'Is Superuser',
            default: false
        },
        is_verified: {
            type: 'boolean',
            title: 'Is Verified',
            default: false
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        },
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        settings: {
            type: 'object',
            title: 'Settings'
        }
    },
    type: 'object',
    required: ['id', 'email', 'role', 'settings'],
    title: 'UserRead'
} as const;

export const $UserRole = {
    type: 'string',
    enum: ['basic', 'admin'],
    title: 'UserRole'
} as const;

export const $UserUpdate = {
    properties: {
        password: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Password'
        },
        email: {
            anyOf: [
                {
                    type: 'string',
                    format: 'email'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Email'
        },
        is_active: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Active'
        },
        is_superuser: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Superuser'
        },
        is_verified: {
            anyOf: [
                {
                    type: 'boolean'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Is Verified'
        },
        role: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/UserRole'
                },
                {
                    type: 'null'
                }
            ]
        },
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        settings: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Settings'
        }
    },
    type: 'object',
    title: 'UserUpdate'
} as const;

export const $ValidationError = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const $WebhookResponse = {
    properties: {
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        secret: {
            type: 'string',
            title: 'Secret'
        },
        status: {
            type: 'string',
            enum: ['online', 'offline'],
            title: 'Status'
        },
        entrypoint_ref: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entrypoint Ref'
        },
        filters: {
            type: 'object',
            title: 'Filters'
        },
        method: {
            type: 'string',
            enum: ['GET', 'POST'],
            title: 'Method'
        },
        workflow_id: {
            type: 'string',
            title: 'Workflow Id'
        },
        url: {
            type: 'string',
            title: 'Url'
        }
    },
    type: 'object',
    required: ['owner_id', 'created_at', 'updated_at', 'id', 'secret', 'status', 'filters', 'method', 'workflow_id', 'url'],
    title: 'WebhookResponse'
} as const;

export const $WorkflowDefinition = {
    properties: {
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        version: {
            type: 'integer',
            title: 'Version',
            description: 'DSL spec version'
        },
        workflow_id: {
            type: 'string',
            title: 'Workflow Id'
        },
        content: {
            type: 'object',
            title: 'Content'
        }
    },
    type: 'object',
    required: ['owner_id', 'created_at', 'updated_at', 'version', 'workflow_id', 'content'],
    title: 'WorkflowDefinition',
    description: `A workflow definition.

This is the underlying representation/snapshot of a workflow in the system, which
can directly execute in the runner.

Shoulds
-------
1. Be convertible into a Workspace Workflow + Acitons
2. Be convertible into a YAML DSL
3. Be able to be versioned

Shouldn'ts
----------
1. Have any stateful information

Relationships
-------------
- 1 Workflow to many WorkflowDefinitions`
} as const;

export const $WorkflowExecutionResponse = {
    properties: {
        id: {
            type: 'string',
            title: 'Id',
            description: 'The ID of the workflow execution'
        },
        run_id: {
            type: 'string',
            title: 'Run Id',
            description: 'The run ID of the workflow execution'
        },
        start_time: {
            type: 'string',
            format: 'date-time',
            title: 'Start Time',
            description: 'The start time of the workflow execution'
        },
        execution_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Execution Time',
            description: 'When this workflow run started or should start.'
        },
        close_time: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Close Time',
            description: 'When the workflow was closed if closed.'
        },
        status: {
            type: 'string',
            enum: ['RUNNING', 'COMPLETED', 'FAILED', 'CANCELED', 'TERMINATED', 'CONTINUED_AS_NEW', 'TIMED_OUT']
        },
        workflow_type: {
            type: 'string',
            title: 'Workflow Type'
        },
        task_queue: {
            type: 'string',
            title: 'Task Queue'
        },
        history_length: {
            type: 'integer',
            title: 'History Length',
            description: 'Number of events in the history'
        }
    },
    type: 'object',
    required: ['id', 'run_id', 'start_time', 'status', 'workflow_type', 'task_queue', 'history_length'],
    title: 'WorkflowExecutionResponse'
} as const;

export const $WorkflowMetadataResponse = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        icon_url: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Icon Url'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        }
    },
    type: 'object',
    required: ['id', 'title', 'description', 'status', 'icon_url', 'created_at', 'updated_at', 'version'],
    title: 'WorkflowMetadataResponse'
} as const;

export const $WorkflowResponse = {
    properties: {
        id: {
            type: 'string',
            title: 'Id'
        },
        title: {
            type: 'string',
            title: 'Title'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        status: {
            type: 'string',
            title: 'Status'
        },
        actions: {
            additionalProperties: {
                '$ref': '#/components/schemas/ActionResponse'
            },
            type: 'object',
            title: 'Actions'
        },
        object: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Object'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        version: {
            anyOf: [
                {
                    type: 'integer'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Version'
        },
        webhook: {
            '$ref': '#/components/schemas/WebhookResponse'
        },
        schedules: {
            items: {
                '$ref': '#/components/schemas/Schedule'
            },
            type: 'array',
            title: 'Schedules'
        },
        entrypoint: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Entrypoint'
        },
        static_inputs: {
            type: 'object',
            title: 'Static Inputs'
        },
        returns: {
            title: 'Returns'
        },
        config: {
            anyOf: [
                {
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Config'
        }
    },
    type: 'object',
    required: ['id', 'title', 'description', 'status', 'actions', 'object', 'owner_id', 'webhook', 'schedules', 'entrypoint', 'static_inputs', 'returns', 'config'],
    title: 'WorkflowResponse'
} as const;

export const $WorkspaceMember = {
    properties: {
        user_id: {
            type: 'string',
            format: 'uuid4',
            title: 'User Id'
        },
        first_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'First Name'
        },
        last_name: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Last Name'
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        }
    },
    type: 'object',
    required: ['user_id', 'first_name', 'last_name', 'email', 'role'],
    title: 'WorkspaceMember'
} as const;

export const $WorkspaceMembershipResponse = {
    properties: {
        user_id: {
            type: 'string',
            format: 'uuid4',
            title: 'User Id'
        },
        workspace_id: {
            type: 'string',
            format: 'uuid4',
            title: 'Workspace Id'
        }
    },
    type: 'object',
    required: ['user_id', 'workspace_id'],
    title: 'WorkspaceMembershipResponse'
} as const;

export const $WorkspaceMetadataResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid4',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        n_members: {
            type: 'integer',
            title: 'N Members'
        }
    },
    type: 'object',
    required: ['id', 'name', 'n_members'],
    title: 'WorkspaceMetadataResponse'
} as const;

export const $WorkspaceResponse = {
    properties: {
        id: {
            type: 'string',
            format: 'uuid4',
            title: 'Id'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        settings: {
            anyOf: [
                {
                    additionalProperties: {
                        type: 'string'
                    },
                    type: 'object'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Settings'
        },
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        n_members: {
            type: 'integer',
            title: 'N Members'
        },
        members: {
            items: {
                '$ref': '#/components/schemas/WorkspaceMember'
            },
            type: 'array',
            title: 'Members'
        }
    },
    type: 'object',
    required: ['id', 'name', 'owner_id', 'n_members', 'members'],
    title: 'WorkspaceResponse'
} as const;

export const $login = {
    properties: {
        grant_type: {
            anyOf: [
                {
                    type: 'string',
                    pattern: 'password'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Grant Type'
        },
        username: {
            type: 'string',
            title: 'Username'
        },
        password: {
            type: 'string',
            title: 'Password'
        },
        scope: {
            type: 'string',
            title: 'Scope',
            default: ''
        },
        client_id: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Id'
        },
        client_secret: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Client Secret'
        }
    },
    type: 'object',
    required: ['username', 'password'],
    title: 'Body_auth-auth:database.login'
} as const;

export const $tracecat__db__schemas__CaseContext = {
    properties: {
        owner_id: {
            type: 'string',
            format: 'uuid',
            title: 'Owner Id'
        },
        created_at: {
            type: 'string',
            format: 'date-time',
            title: 'Created At'
        },
        updated_at: {
            type: 'string',
            format: 'date-time',
            title: 'Updated At'
        },
        id: {
            type: 'string',
            title: 'Id'
        },
        tag: {
            type: 'string',
            title: 'Tag'
        },
        value: {
            type: 'string',
            title: 'Value'
        },
        user_id: {
            anyOf: [
                {
                    type: 'string',
                    format: 'uuid4'
                },
                {
                    type: 'null'
                }
            ],
            title: 'User Id'
        }
    },
    type: 'object',
    required: ['owner_id', 'created_at', 'updated_at', 'tag', 'value', 'user_id'],
    title: 'CaseContext'
} as const;

export const $tracecat__types__api__CaseContext = {
    properties: {
        key: {
            type: 'string',
            title: 'Key'
        },
        value: {
            type: 'string',
            title: 'Value'
        }
    },
    type: 'object',
    required: ['key', 'value'],
    title: 'CaseContext'
} as const;
