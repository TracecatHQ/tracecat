services:
  caddy:
    image: caddy:2.8.4-alpine
    container_name: caddy
    restart: unless-stopped
    ports:
      - 80:80
    environment:
      - BASE_DOMAIN=${BASE_DOMAIN}
      - ADDRESS=${ADDRESS}
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile

  api:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: api
    restart: unless-stopped
    ports:
      - 8000:8000
    environment:
      # App
      LOG_LEVEL: ${LOG_LEVEL}
      TRACECAT__API_URL: ${TRACECAT__API_URL}
      TRACECAT__API_ROOT_PATH: ${TRACECAT__API_ROOT_PATH}
      TRACECAT__APP_ENV: ${TRACECAT__APP_ENV}
      TRACECAT__DB_ENCRYPTION_KEY: ${TRACECAT__DB_ENCRYPTION_KEY} # Sensitive
      TRACECAT__DB_SSLMODE: ${TRACECAT__DB_SSLMODE}
      TRACECAT__DB_URI: ${TRACECAT__DB_URI} # Sensitive
      TRACECAT__PUBLIC_API_URL: ${TRACECAT__PUBLIC_API_URL}
      TRACECAT__PUBLIC_APP_URL: ${TRACECAT__PUBLIC_APP_URL}
      TRACECAT__SERVICE_KEY: ${TRACECAT__SERVICE_KEY} # Sensitive
      TRACECAT__SIGNING_SECRET: ${TRACECAT__SIGNING_SECRET} # Sensitive
      TRACECAT__ALLOW_ORIGINS: ${TRACECAT__ALLOW_ORIGINS}
      TRACECAT__AUTH_TYPES: ${TRACECAT__AUTH_TYPES}
      TRACECAT__AUTH_ALLOWED_DOMAINS: ${TRACECAT__AUTH_ALLOWED_DOMAINS}
      TRACECAT__AUTH_MIN_PASSWORD_LENGTH: ${TRACECAT__AUTH_MIN_PASSWORD_LENGTH}
      TRACECAT__EXECUTOR_URL: ${INTERNAL_EXECUTOR_URL}
      OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      USER_AUTH_SECRET: ${USER_AUTH_SECRET}
      # SAML SSO
      SAML_IDP_ENTITY_ID: ${SAML_IDP_ENTITY_ID}
      SAML_IDP_REDIRECT_URL: ${SAML_IDP_REDIRECT_URL}
      SAML_IDP_CERTIFICATE: ${SAML_IDP_CERTIFICATE}
      SAML_IDP_METADATA_URL: ${SAML_IDP_METADATA_URL}
      SAML_SP_ACS_URL: ${SAML_SP_ACS_URL}
      # Temporal
      TEMPORAL__CLUSTER_URL: ${TEMPORAL__CLUSTER_URL}
      TEMPORAL__CLUSTER_QUEUE: ${TEMPORAL__CLUSTER_QUEUE}
      TEMPORAL__TASK_TIMEOUT: ${TEMPORAL__TASK_TIMEOUT}
      # Migrations
      RUN_MIGRATIONS: "true"
      # Remote registry
      TRACECAT__REMOTE_REPOSITORY_PACKAGE_NAME: ${TRACECAT__REMOTE_REPOSITORY_PACKAGE_NAME}
      TRACECAT__REMOTE_REPOSITORY_URL: ${TRACECAT__REMOTE_REPOSITORY_URL}
      # AI
      TRACECAT__PRELOAD_OSS_MODELS: ${TRACECAT__PRELOAD_OSS_MODELS}
      OLLAMA__API_URL: ${OLLAMA__API_URL}
    volumes:
      - ./tracecat:/app/tracecat
      - ./registry:/app/registry
      - ./alembic:/app/alembic
    depends_on:
      - ollama
      - executor

  worker:
    build:
      context: .
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    environment:
      LOG_LEVEL: ${LOG_LEVEL}
      TRACECAT__API_ROOT_PATH: ${TRACECAT__API_ROOT_PATH}
      TRACECAT__API_URL: ${TRACECAT__API_URL}
      TRACECAT__APP_ENV: ${TRACECAT__APP_ENV}
      TRACECAT__DB_ENCRYPTION_KEY: ${TRACECAT__DB_ENCRYPTION_KEY} # Sensitive
      TRACECAT__DB_SSLMODE: ${TRACECAT__DB_SSLMODE}
      TRACECAT__DB_URI: ${TRACECAT__DB_URI} # Sensitive
      TRACECAT__PUBLIC_API_URL: ${TRACECAT__PUBLIC_API_URL}
      TRACECAT__EXECUTOR_URL: ${INTERNAL_EXECUTOR_URL}
      TRACECAT__SERVICE_KEY: ${TRACECAT__SERVICE_KEY} # Sensitive
      TRACECAT__SIGNING_SECRET: ${TRACECAT__SIGNING_SECRET} # Sensitive
      # Temporal
      TEMPORAL__CLUSTER_URL: ${TEMPORAL__CLUSTER_URL}
      TEMPORAL__CLUSTER_QUEUE: ${TEMPORAL__CLUSTER_QUEUE}
    volumes:
      - ./tracecat:/app/tracecat
      - ./registry:/app/registry
    command: ["python", "tracecat/dsl/worker.py"]

  executor:
    build:
      context: .
      dockerfile: Dockerfile.dev
    restart: unless-stopped
    environment:
      # Common
      LOG_LEVEL: ${LOG_LEVEL}
      TRACECAT__APP_ENV: ${TRACECAT__APP_ENV}
      TRACECAT__DB_ENCRYPTION_KEY: ${TRACECAT__DB_ENCRYPTION_KEY} # Sensitive
      TRACECAT__DB_SSLMODE: ${TRACECAT__DB_SSLMODE}
      TRACECAT__DB_URI: ${TRACECAT__DB_URI} # Sensitive
      TRACECAT__SERVICE_KEY: ${TRACECAT__SERVICE_KEY} # Sensitive
      TRACECAT__SIGNING_SECRET: ${TRACECAT__SIGNING_SECRET} # Sensitive
      # Registry
      TRACECAT__REMOTE_REPOSITORY_URL: ${TRACECAT__REMOTE_REPOSITORY_URL}
      TRACECAT__REMOTE_REPOSITORY_PACKAGE_NAME: ${TRACECAT__REMOTE_REPOSITORY_PACKAGE_NAME}
      TRACECAT__UNSAFE_DISABLE_SM_MASKING: ${TRACECAT__UNSAFE_DISABLE_SM_MASKING:-false}
      # AI
      TRACECAT__PRELOAD_OSS_MODELS: ${TRACECAT__PRELOAD_OSS_MODELS}
      OLLAMA__API_URL: ${OLLAMA__API_URL}
    volumes:
      - ./tracecat:/app/tracecat
    ports:
      - 8001:8000
    command:
      [
        "python",
        "-m",
        "uvicorn",
        "tracecat.api.executor:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000",
        "--reload",
      ]

  ui:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
        NEXT_SERVER_API_URL: ${NEXT_SERVER_API_URL}
        NODE_ENV: ${NODE_ENV}
    container_name: ui
    restart: unless-stopped
    ports:
      - 3000:3000
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
      NEXT_PUBLIC_APP_ENV: ${NEXT_PUBLIC_APP_ENV}
      NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
      NEXT_PUBLIC_AUTH_TYPES: ${TRACECAT__AUTH_TYPES}
      NEXT_SERVER_API_URL: ${NEXT_SERVER_API_URL}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      - api
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/.next:/app/.next
      - ./frontend/node_modules:/app/node_modules
    attach: false

  postgres_db:
    image: postgres:16
    container_name: postgres_db
    restart: unless-stopped
    ports:
      - 5432:5432
    shm_size: 128mb
    environment:
      POSTGRES_USER: ${TRACECAT__POSTGRES_USER}
      POSTGRES_PASSWORD: ${TRACECAT__POSTGRES_PASSWORD}
    volumes:
      - core-db:/var/lib/postgresql/data

  temporal_postgres_db:
    image: postgres:13
    container_name: temporal_postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${TEMPORAL__POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEMPORAL__POSTGRES_PASSWORD}
    volumes:
      - temporal-db:/var/lib/postgresql/data

  temporal:
    image: temporalio/auto-setup:${TEMPORAL__VERSION}
    container_name: temporal
    restart: unless-stopped
    ports:
      - 7233:7233
    environment:
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=${TEMPORAL__POSTGRES_USER}
      - POSTGRES_PWD=${TEMPORAL__POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=temporal_postgres_db
      - LOG_LEVEL=warn
    depends_on:
      - temporal_postgres_db

    attach: false

  temporal_ui:
    image: temporalio/ui:${TEMPORAL__UI_VERSION}
    container_name: temporal_ui
    ports:
      - 9090:8080
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    depends_on:
      - temporal
    attach: false

  ollama:
    container_name: ollama
    tty: true
    restart: unless-stopped
    image: ollama/ollama:${OLLAMA__VERSION}
    ports:
      - 11434:11434
    volumes:
      - ollama:/root/.ollama

volumes:
  core-db:
  temporal-db:
  ollama:
